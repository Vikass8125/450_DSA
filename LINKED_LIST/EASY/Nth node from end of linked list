Given a linked list consisting of L nodes and given a number N.
The task is to find the Nth node from the end of the linked list.

Example 1:

Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output: 8
Explanation: In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end os 8.  
Example 2:

Input:
N = 5
LinkedList: 10->5->100->5
Output: -1
Explanation: In the second example, there
are 4 nodes in the linked list and we
need to find 5th from the end. Since 'n'
is more than the number of nodes in the
linked list, the output is -1.
Your Task:
The task is to complete the function getNthFromLast() which takes two arguments: 
reference to head and N and you need to return Nth from the end or -1 in case node doesn't exist..

Note:
Try to solve in single traversal.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= L <= 106
1 <= N <= 106




MY_SOLUTION

class GfG
{
    //Function to find the data of nth node from the end of a linked list.
    int getNthFromLast(Node head, int n)
    {
    	// Your code here	
    	//FINDING THE LENGTH OF L.L
    	int len = 0;
    	Node cur = head;
    	while(cur != null){
    	    len++;
    	    cur = cur.next;
    	}
    	
    	if(n > len) return -1;
    	
    	int newLen = len - n + 1;
    	
    	cur = head;
    	for(int i = 1; i < newLen; i++){
    	    cur = cur.next;
    	}
    	
    	return cur.data;
    }
}

==========================================


class GfG
{
    //Function to find the data of nth node from the end of a linked list.
    int getNthFromLast(Node head, int n)
    {
        //using two pointers, similar to finding middle element.
        Node currNode = head , nthNode = head;
        
        //traversing first n elements with first pointer.
        while(n!=0)
            {
                if(currNode==null)
                    return -1;
                currNode = currNode.next;
                n--;
            }
        //now traversing with both pointers and when first pointer gives null 
        //we have got the nth node from end in second pointer since the first 
        //pointer had already traversed n nodes and thus had difference of n 
        //nodes with second pointer.
        while(currNode!=null)   
            {
                nthNode = nthNode.next;
                currNode = currNode.next;
            }
            
        //returning the data of nth node from end.
        if(nthNode!=null)
            return nthNode.data;
        else
            return -1;
            
    }
}

===============================================================

Naive Approach: Follow the given steps to solve the problem using this approach: 

Calculate the length of the Linked List. Let the length be len. 
Print the (len - n + 1)th node from the beginning of the Linked List. 
Below is the implementation of the above approach:

// Java program to find N'th node from
// end of linked list
class LinkedList {
    Node head; // head of the list

    /* Linked List node */
    class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }

    /* Function to get the Nth node from the last of a
       linked list */
    void printNthFromLast(int N)
    {
        int len = 0;
        Node temp = head;

        // 1) count the number of nodes in Linked List
        while (temp != null) {
            temp = temp.next;
            len++;
        }

        // check if value of N is not more than length of
        // the linked list
        if (len < N)
            return;

        temp = head;

        // 2) get the (len-N+1)th node from the beginning
        for (int i = 1; i < len - N + 1; i++)
            temp = temp.next;

        System.out.println(temp.data);
    }

    /* Inserts a new Node at front of the list. */
    public void push(int new_data)
    {
        /* 1 & 2: Allocate the Node &
                  Put in the data*/
        Node new_node = new Node(new_data);

        /* 3. Make next of new Node as head */
        new_node.next = head;

        /* 4. Move the head to point to new Node */
        head = new_node;
    }

    // Driver's code
    public static void main(String[] args)
    {
        LinkedList llist = new LinkedList();
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(35);
        
          // Function call
        llist.printNthFromLast(4);
    }
    

Output
35
Time complexity: O(M) where M is the size of the linked list
Auxiliary Space: O(1)


============================================

Below is a recursive code for the same method. 

static void printNthFromLast(Node head, int N)
{
    int i = 0;

    if (head == null)
        return;
    printNthFromLast(head.next, N);

    if (++i == N)
        System.out.print(head.data);
}

// This code is contributed by rutvik_56.
Time Complexity: O(M) where M is the length of the linked list. 
Auxiliary Space: O(M) for call stack

=============================================

Nth node from the end of a Linked List using two pointers:
As Nth node from the end equals to (Length - N + 1)th node from the start, 
so the idea is to Maintain two pointers starting from the head of the Linked-List and move 
one pointer to the Nth node from the start and then move both the pointers together until the pointer 
at the Nth position reaches the last node. Now the pointer which was moved later points at the Nth node 
from the end of the Linked-List




Follow the given steps to solve the problem:

Maintain two pointers main_ptr and ref_ptr
Move ref_ptr to the Nth node from the start
Now move both main_ptr and ref_ptr, until the ref_ptr reaches the last node
Now print the data of the main_ptr, as it is at the Nth node from the end
Below is the implementation of the above approach: 

// Java program to find N'th
// node from end
class LinkedList {
    Node head; // head of the list

    /* Linked List node */
    class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }

    /* Function to get the
      Nth node from end of list */
    void printNthFromLast(int N)
    {
        Node main_ptr = head;
        Node ref_ptr = head;

        int count = 0;
        if (head != null) {
            while (count < N) {
                if (ref_ptr == null) {
                    System.out.println(
                        N + " is greater than the no "
                        + " of nodes in the list");
                    return;
                }
                ref_ptr = ref_ptr.next;
                count++;
            }

            if (ref_ptr == null) {

                if (head != null)
                    System.out.println("Node no. " + N
                                       + " from last is "
                                       + head.data);
            }
            else {

                while (ref_ptr != null) {
                    main_ptr = main_ptr.next;
                    ref_ptr = ref_ptr.next;
                }
                System.out.println("Node no. " + N
                                   + " from last is "
                                   + main_ptr.data);
            }
        }
    }

    /* Inserts a new Node at front of the list. */
    public void push(int new_data)
    {
        /* 1 & 2: Allocate the Node &
                  Put in the data*/
        Node new_node = new Node(new_data);

        /* 3. Make next of new Node as head */
        new_node.next = head;

        /* 4. Move the head to point to new Node */
        head = new_node;
    }

    // Driver's code
    public static void main(String[] args)
    {
        LinkedList llist = new LinkedList();
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(35);

        // Function call
        llist.printNthFromLast(4);
    }
}

Output
35->15->4->20->NULL
Node no. 4 from end is: 35

Time Complexity: O(M) where M is the length of the linked list.
Auxiliary Space: O(1)

