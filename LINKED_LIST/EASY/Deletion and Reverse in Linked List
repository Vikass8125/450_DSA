Given a Circular Linked List of size N. The task is to delete the given node (excluding the first and last node) in the circular linked list and 
then print the reverse of the circular linked list.

 

Example 1:


Input:
5
2 5 7 8 10
8

Output:
10 7 5 2
Explanation: 
After deleting 8 from the given circular linked 
list, it has elements as 2, 5, 7, 10. Now, 
reversing this list will result in 10, 7, 5, 2.
 

Example 2:

Input:
4
1 7 8 10
8

Output:
10 7 1

Explanation:
After deleting 8 from the given circular linked 
list, it has elements as 1, 7,10. Now, reversing 
this list will result in 10, 7, 1.
 

Your Task:
You don't need to read, input, or print anything. Your task is to complete the function deleteNode( ), which takes Node head, 
and integer key as input parameters, and delete the node with data key. Also Complete function reverse() which reverses the linked list.

 

Constraints:
1 <= T <= 100
1 <= n <= 100
1 <= data <= 100

MY_SOLUTION


class GFG
{
    //This method returns the head of the LL after deleting node with value d.
    public static Node deleteNode(Node head,int d)
    {
        //Add your code here.
        Node prev = head;
        Node cur = head.next;
       
        while(cur.data != d){
            prev = cur;
            cur = cur.next;
        }
        
        prev.next = cur.next;
        
        return head;
    }
    //This method returns the head node of the reversed Linked list.
    public static Node reverse(Node head)
    {
        //Add your code here
        Node prev = head;
        Node cur = head.next;
        while(cur != head){
            Node next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
            
        }
        
        head.next = prev;
        return prev;
    }
}
===========================================================================================

class GFG
{
    //This method returns the head of the LL after deleting node with value d.
    public static Node deleteNode(Node head,int d)
    {
        //Add your code here.
        Node prev=null,temp=head;
        
        while(temp.next!=head){
            if(temp.data==d){
                prev.next=temp.next;
            }else{
                prev=temp;
            }
            temp=temp.next;
        }
        return head;
    }
    //This method returns the head node of the reversed Linked list.
    public static Node reverse(Node head)
    {
        //Add your code here
        Node temp=head;
        
        Node prev=null,curr=head,nxt=head.next;
        
        while(curr.next!=head){
            curr.next=prev;
            prev=curr;
            curr=nxt;
            nxt=nxt.next;
        }
        curr.next=prev;
        prev=curr;
        head.next=prev;
        return prev;
    
    }   
}

===========================================================================================
Algorithm
Case 1: List is empty. 

If the list is empty we will simply return.
Case 2:List is not empty  

If the list is not empty then we define two pointers curr and prev and initialize the pointer curr with the head node.
Traverse the list using curr to find the node to be deleted and before moving to curr to the next node, every time set prev = curr.
If the node is found, check if it is the only node in the list. If yes, set head = NULL and free(curr).
If the list has more than one node, check if it is the first node of the list. Condition to check this( curr == head). 

If yes, then move prev until it reaches the last node. After prev reaches the last node, set head = head -> next and prev -> next = head. Delete curr.
If curr is not the first node, we check if it is the last node in the list. Condition to check this is (curr -> next == head).
If curr is the last node. Set prev -> next = head and delete the node curr by free(curr).
If the node to be deleted is neither the first node nor the last node, then set prev -> next = curr -> next and delete curr.
Recommended Problem
Deletion and Reverse in Linked List
circular linked list
circular-linked-list
+1 more
Intuit
Solve Problem
Submission count: 16.1K
Complete program to demonstrate deletion in Circular Linked List: 


// Java program to delete a given key from
// linked list.
class GFG {
  
    /* ure for a node */
    static class Node {
        int data;
        Node next;
    };
  
    /* Function to insert a node at the beginning of 
a Circular linked list */
    static Node push(Node head_ref, int data)
    {
        // Create a new node and make head as next
        // of it.
        Node ptr1 = new Node();
        ptr1.data = data;
        ptr1.next = head_ref;
  
        /* If linked list is not null then set the 
    next of last node */
        if (head_ref != null) {
            // Find the node before head and update
            // next of it.
            Node temp = head_ref;
            while (temp.next != head_ref)
                temp = temp.next;
            temp.next = ptr1;
        }
        else
            ptr1.next = ptr1; /*For the first node */
  
        head_ref = ptr1;
        return head_ref;
    }
  
    /* Function to print nodes in a given 
circular linked list */
    static void printList(Node head)
    {
        Node temp = head;
        if (head != null) {
            do {
                System.out.printf("%d ", temp.data);
                temp = temp.next;
            } while (temp != head);
        }
  
        System.out.printf("\n");
    }
  
    /* Function to delete a given node from the list */
    static Node deleteNode(Node head, int key)
    {
        if (head == null)
            return null;
  
        // Find the required node
        Node curr = head, prev = new Node();
        while (curr.data != key) {
            if (curr.next == head) {
                System.out.printf("\nGiven node is not found"
                                  + " in the list!!!");
                break;
            }
  
            prev = curr;
            curr = curr.next;
        }
  
        // Check if node is only node
        if (curr == head && curr.next == head) {
            head = null;
            return head;
        }
  
        // If more than one node, check if
        // it is first node
        if (curr == head) {
            prev = head;
            while (prev.next != head)
                prev = prev.next;
            head = curr.next;
            prev.next = head;
        }
  
        // check if node is last node
        else if (curr.next == head) {
            prev.next = head;
        }
        else {
            prev.next = curr.next;
        }
        return head;
    }
  
    /* Driver code */
    public static void main(String args[])
    {
        /* Initialize lists as empty */
        Node head = null;
  
        /* Created linked list will be 2.5.7.8.10 */
        head = push(head, 2);
        head = push(head, 5);
        head = push(head, 7);
        head = push(head, 8);
        head = push(head, 10);
  
        System.out.printf("List Before Deletion: ");
        printList(head);
  
        head = deleteNode(head, 7);
  
        System.out.printf("List After Deletion: ");
        printList(head);
    }
}
  
// This code is contributed by Arnab Kundu
Output
List Before Deletion: 10 8 7 5 2 
List After Deletion: 10 8 5 2 
Time Complexity: O(n)

Worst case occurs when the element to be deleted is the last element and we need to move through the whole list.

Auxiliary Space: O(1)

As constant extra space is used.


===========================================================================================
