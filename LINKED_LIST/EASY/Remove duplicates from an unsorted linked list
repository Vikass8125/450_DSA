Given an unsorted linked list of N nodes.
The task is to remove duplicate elements from this unsorted Linked List.
When a value appears in multiple nodes, the node which appeared first should be kept, 
all others duplicates are to be removed.

Example 1:

Input:
N = 4
value[] = {5,2,2,4}
Output: 5 2 4
Explanation:Given linked list elements are
5->2->2->4, in which 2 is repeated only.
So, we will delete the extra repeated
elements 2 from the linked list and the
resultant linked list will contain 5->2->4
Example 2:

Input:
N = 5
value[] = {2,2,2,2,2}
Output: 2
Explanation:Given linked list elements are
2->2->2->2->2, in which 2 is repeated. So,
we will delete the extra repeated elements
2 from the linked list and the resultant
linked list will contain only 2.
Your Task:
You have to complete the method removeDuplicates() which takes 1 argument: the head of the linked list. 
Your function should return a pointer to a linked list with no duplicate element.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= size of linked lists <= 106
0 <= numbers in list <= 104

MY_SOLUTION

class Solution
{
    //Function to remove duplicates from unsorted linked list.
    public Node removeDuplicates(Node head) 
    {
         // Your code here
         if(head == null || head.next == null) return head;
         
         HashSet<Integer> map = new HashSet<>();
         
         Node prev = null;
         Node cur = head;
         
         while(cur != null){
             if(map.contains(cur.data)){
                 prev.next = cur.next;
                 cur = cur.next;
             }
             else{
                 map.add(cur.data);
                 prev = cur;
                 cur = cur.next;
             }
             
             
         }
         
         return head;
             
             
    }
}



============================================================================================

class Solution
{
    //Function to remove duplicates from unsorted linked list.
	public Node removeDuplicates(Node head)  
    { 
        //using set to store already seen values in list. 
        HashSet<Integer> hs = new HashSet<>(); 
      
        //using two pointers one of which stores first node other null.
        Node current = head; 
        Node prev = null; 
        
        //traversing over the linked list.
        while (current != null)  
        { 
            int curval = current.data; 
              
            //if data at current node is already present in set, we skip the 
            //current node and store the node next to current in link of prev. 
            if (hs.contains(curval)) { 
                prev.next = current.next;
                //deleting current node which contains duplicates. 
                current=null;
            }
            //else we just insert the data at current node in set and update 
            //prev to the current node.
            else { 
                hs.add(curval); 
                prev = current; 
            }
            //updating current to the next node of prev.
            current = prev.next; 
        } 
        return head;
    } 
}


=======================================================================

Naive Approach: 

Use two loops, Outer loop is used to pick the elements one by one and the Inner loop compares the 
picked element with the rest of the elements. 

Below is the Implementation of the above approach:

// Java program to remove duplicates from unsorted
// linked list
 
class LinkedList {
 
    static Node head;
 
    static class Node {
 
        int data;
        Node next;
 
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
 
    /* Function to remove duplicates from an
       unsorted linked list */
    void remove_duplicates()
    {
        Node ptr1 = null, ptr2 = null, dup = null;
        ptr1 = head;
 
        /* Pick elements one by one */
        while (ptr1 != null && ptr1.next != null) {
            ptr2 = ptr1;
 
            /* Compare the picked element with rest
                of the elements */
            while (ptr2.next != null) {
 
                /* If duplicate then delete it */
                if (ptr1.data == ptr2.next.data) {
 
                    /* sequence of steps is important here
                     */
                    ptr2.next = ptr2.next.next;
                    System.gc();
                }
                else /* This is tricky */ {
                    ptr2 = ptr2.next;
                }
            }
            ptr1 = ptr1.next;
        }
    }
 
    void printList(Node node)
    {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
 
    public static void main(String[] args)
    {
        LinkedList list = new LinkedList();
        list.head = new Node(10);
        list.head.next = new Node(12);
        list.head.next.next = new Node(11);
        list.head.next.next.next = new Node(11);
        list.head.next.next.next.next = new Node(12);
        list.head.next.next.next.next.next = new Node(11);
        list.head.next.next.next.next.next.next
            = new Node(10);
 
        System.out.println(
            "Linked List before removing duplicates : ");
        list.printList(head);
 
        list.remove_duplicates();
        System.out.println("\n");
        System.out.println(
            "Linked List after removing duplicates : ");
        list.printList(head);
    }
}
Output
Linked list before removing duplicates 10 12 11 11 12 11 10 
Linked list after removing duplicates 10 12 11 
Time Complexity: O(N2)
Auxiliary Space: O(1)

============================================

Remove duplicates from an unsorted linked list using sorting:
Follow the below steps to Implement the idea:

Sort the elements using Merge Sort for Linked Lists.
Remove duplicates in linear time using the algorithm for removing duplicates in sorted Linked List.
Note: that this method doesnâ€™t preserve the original order of elements.

Time Complexity: O(N logN)
Auxiliary Space: O(1)


============================================

Remove duplicates from an unsorted linked list using Hashing:
Traverse the link list from head to end. For every newly encountered element, check whether if it is in the hash table: if yes, we remove it; otherwise put it in the hash table.

Follow the below steps to Implement the idea:

Create a Unordered set to keep a track of the visited elements.
Traverse the linked list from head to end node 
If current node is already present in the Hashset. Then delete the current node. 
Else move insert the node in the Hashset and move to the next node.
Return 

Below is the implementation of the above approach:

// Java program to remove duplicates
// from unsorted linkedlist
 
import java.util.HashSet;
 
public class removeDuplicates {
    static class node {
        int val;
        node next;
 
        public node(int val) { this.val = val; }
    }
 
    /* Function to remove duplicates from a
       unsorted linked list */
    static void removeDuplicate(node head)
    {
        // Hash to store seen values
        HashSet<Integer> hs = new HashSet<>();
 
        /* Pick elements one by one */
        node current = head;
        node prev = null;
        while (current != null) {
            int curval = current.val;
 
            // If current value is seen before
            if (hs.contains(curval)) {
                prev.next = current.next;
            }
            else {
                hs.add(curval);
                prev = current;
            }
            current = current.next;
        }
    }
 
    /* Function to print nodes in a given linked list */
    static void printList(node head)
    {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }
 
    public static void main(String[] args)
    {
        /* The constructed linked list is:
         10->12->11->11->12->11->10*/
        node start = new node(10);
        start.next = new node(12);
        start.next.next = new node(11);
        start.next.next.next = new node(11);
        start.next.next.next.next = new node(12);
        start.next.next.next.next.next = new node(11);
        start.next.next.next.next.next.next = new node(10);
 
        System.out.println(
            "Linked list before removing duplicates :");
        printList(start);
 
        removeDuplicate(start);
 
        System.out.println(
            "\nLinked list after removing duplicates :");
        printList(start);
    }
}
 
Output
Linked list before removing duplicates : 
10 12 11 11 12 11 10 
Linked list after removing duplicates : 
10 12 11 
Thanks to bearwang for suggesting this method.

Time Complexity: O(N), on average (assuming that hash table access time is O(1) on average).  
Auxiliary Space : O(N), As extra space is used to store the elements in the stack.

