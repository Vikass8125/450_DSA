Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() 
which should return minimum element from the SpecialStack. Your task is to complete all the functions, using stack data-Structure.


Example 1:

Input:
Stack: 18 19 29 15 16
Output: 15
Explanation:
The minimum element of the stack is 15.
 


Your Task:
Since this is a function problem, you don't need to take inputs. You just have to complete 5 functions, push() which takes the stack and an integer x as input 
and pushes it into the stack; pop() which takes the stack as input and pops out the topmost element from the stack; 
isEmpty() which takes the stack as input and returns true/false depending upon whether the stack is empty or not; 
isFull() which takes the stack and the size of the stack as input and returns true/false depending upon whether the stack is full or not (depending upon the
given size); getMin() which takes the stack as input and returns the minimum element of the stack. 
Note: The output of the code will be the value returned by getMin() function.


Expected Time Complexity: O(N) for getMin, O(1) for remaining all 4 functions.
Expected Auxiliary Space: O(1) for all the 5 functions.


Constraints:
1 ≤ N ≤ 104


MY_SOLUTION

class GfG{
    
    Stack<Integer> spSt = new Stack<>();
    
	public void push(int a,Stack<Integer> s)
	{
	    //add code here.
	    if(s.isEmpty()) spSt.push(a);
	    if(spSt.peek() > a) spSt.push(a);
	    s.push(a);
	}
	public int pop(Stack<Integer> s)
        {
            //add code here.
            int val = s.pop();
            if(spSt.peek() == val) spSt.pop();
            return val;
	}
	public int min(Stack<Integer> s)
        {
           //add code here.
          return spSt.peek();
           
	}
	public boolean isFull(Stack<Integer>s, int n)
        {
           //add code here.
           return s.size() == n;
	}
	public boolean isEmpty(Stack<Integer>s)
        {
           //add code here.
           return s.isEmpty();
	}
}
====================================

class GfG{
	public void push(int a,Stack<Integer> s)
	{
		s.push(a);
	}
	public int pop(Stack<Integer> s){
		int a=s.pop();
		return a;
	}
	public int min(Stack<Integer> s){
		GfG g=new GfG();
		int m=g.pop(s);
		while(!g.isEmpty(s)){
			int n=g.pop(s);
			if(n<m)
				m=n;
		}
		return m;
	}
	public boolean isFull(Stack<Integer>s, int n){
		if(s.size()==n)
			return true;
		return false;
	}
	public boolean isEmpty(Stack<Integer>s){
		if(s.size()==0)
			return true;
		return false;
	}
}

====================================
class GfG{

public void push(int a,Stack<Integer> s)

{

    s.push(a);

}

public int pop(Stack<Integer> s)

       {

           return s.pop();

}

public int min(Stack<Integer> s)

       {

          int min=s.peek();

          if(s.isEmpty()){

              return -1;

          }

          for(int i=0; i<s.size(); i++){

              if(min>s.get(i)){

                  min=s.get(i);

              }

          }

          return min;

}

public boolean isFull(Stack<Integer>s, int n)

       {

          //add code here.

          if(s.size()>=n){

              return true;
class GfG{
public void push(int a,Stack<Integer> s)
{
    //add code here.
    s.push(a);
    
}
public int pop(Stack<Integer> s)
       {
           //add code here.
           return s.pop();
}
public int min(Stack<Integer> s)
       {
          //add code here.
          java.util.Collections.sort(s, java.util.Collections.reverseOrder());
          return s.peek();
          
}
public boolean isFull(Stack<Integer>s, int n)
       {
          //add code here.
          if(s.size() >= n)
          return true;
          return false;
}
public boolean isEmpty(Stack<Integer>s)
       {
          //add code here.
          return s.isEmpty();
}
}

======================================================

//GetMin() in TC: O(1) and SC: O(1)

int mini=INT_MAX;
void push(stack<int>& s, int a){
if(s.empty())
{
    s.push(a);
    mini=a;
}
else
{
    if(a < mini)
    {
        int val=2*a-mini;
        s.push(val);
        mini=a;
    }
    else
        s.push(a);
}
}

bool isFull(stack<int>& s,int n){
if(s.size()==n)
    return true;
 return false;
}

bool isEmpty(stack<int>& s){
return s.empty();
}

int pop(stack<int>& s){
if(s.empty())
    return -1;

int curr=s.top();
   s.pop();
   if(curr < mini)
       return curr;
   else
   {
       int prevmini=mini;
       int val=2*mini-curr;
       mini =val;
       return prevmini;
   }
}

int getMin(stack<int>& s){
if(s.empty())
    return -1;
return mini;
}


===============================================
class GfG{
public void push(int a,Stack<Integer> s)
{
    //add code here.
    s.push(a);
    
}
public int pop(Stack<Integer> s)
       {
           //add code here.
           return s.pop();
}
public int min(Stack<Integer> s)
       {
          //add code here.
          java.util.Collections.sort(s, java.util.Collections.reverseOrder());
          return s.peek();
          
}
public boolean isFull(Stack<Integer>s, int n)
       {
          //add code here.
          if(s.size() >= n)
          return true;
          return false;
}
public boolean isEmpty(Stack<Integer>s)
       {
          //add code here.
          return s.isEmpty();
}
}

======================================================

//GetMin() in TC: O(1) and SC: O(1)

int mini=INT_MAX;
void push(stack<int>& s, int a){
if(s.empty())
{
    s.push(a);
    mini=a;
}
else
{
    if(a < mini)
    {
        int val=2*a-mini;
        s.push(val);
        mini=a;
    }
    else
        s.push(a);
}
}

bool isFull(stack<int>& s,int n){
if(s.size()==n)
    return true;
 return false;
}

bool isEmpty(stack<int>& s){
return s.empty();
}

int pop(stack<int>& s){
if(s.empty())
    return -1;

int curr=s.top();
   s.pop();
   if(curr < mini)
       return curr;
   else
   {
       int prevmini=mini;
       int val=2*mini-curr;
       mini =val;
       return prevmini;
   }
}

int getMin(stack<int>& s){
if(s.empty())
    return -1;
return mini;
}


=================================================

//https://www.geeksforgeeks.org/design-and-implement-special-stack-data-structure/

Use two stacks: 
one to store actual stack elements and the other as an auxiliary stack to store minimum values. 
The idea is to do push() and pop() operations in such a way that the top of the auxiliary stack is always the minimum. 
Let us see how push() and pop() operations work.

Push(int x) // inserts an element x to Special Stack 

1) push x to the first stack (the stack with actual elements) 
2) compare x with the top element of the second stack (the auxiliary stack). Let the top element be y. 
  -> If x is smaller than y then push x to the auxiliary stack. 
  -> If x is greater than y then push y to the auxiliary stack.

int Pop() // removes an element from Special Stack and return the removed element 

1.pop the top element from the auxiliary stack. 
2.pop the top element from the actual stack and return it. Step 1 is necessary to make sure that the auxiliary stack is also updated for future operations.

int getMin() // returns the minimum element from Special Stack 

1.Return the top element of the auxiliary stack.

We can see that all the above operations are O(1). 

Let us see an example. Let us assume that both stacks are initially empty and 18, 19, 29, 15, and 16 are inserted to the SpecialStack. 

When we insert 18, both stacks change to following.
Actual Stack
18 <--- top     
Auxiliary Stack
18 <---- top

When 19 is inserted, both stacks change to following.
Actual Stack
19 <--- top     
18
Auxiliary Stack
18 <---- top
18

When 29 is inserted, both stacks change to following.
Actual Stack
29 <--- top     
19
18
Auxiliary Stack
18 <---- top
18
18

When 15 is inserted, both stacks change to following.
Actual Stack
15 <--- top     
29
19 
18
Auxiliary Stack
15 <---- top
18
18
18

When 16 is inserted, both stacks change to following.
Actual Stack
16 <--- top     
15
29
19 
18
Auxiliary Stack
15 <---- top
15
18
18
18

The following is the implementation for SpecialStack class.
In the below implementation, SpecialStack inherits from Stack and has one Stack object min which works as an auxiliary stack.


// Java implementation of SpecialStack
// Note : here we use Stack class for
// Stack implementation
  
import java.util.Stack;
  
/* A class that supports all the 
stack operations and one additional
operation getMin() that returns 
the minimum element from stack at
any time. This class inherits from 
the stack class and uses an
auxiliary stack that holds minimum
 elements */
  
class SpecialStack extends Stack<Integer> {
    Stack<Integer> min = new Stack<>();
  
    /* SpecialStack's member method to 
insert an element to it. This method
    makes sure that the min stack is 
also updated with appropriate minimum
    values */
    void push(int x)
    {
        if (isEmpty() == true) {
            super.push(x);
            min.push(x);
        }
        else {
            super.push(x);
            int y = min.pop();
            min.push(y);
            if (x < y)
                min.push(x);
            else
                min.push(y);
        }
    }
  
    /* SpecialStack's member method to 
insert an element to it. This method
    makes sure that the min stack is 
also updated with appropriate minimum
    values */
    public Integer pop()
    {
        int x = super.pop();
        min.pop();
        return x;
    }
  
    /* SpecialStack's member method to get 
minimum element from it. */
    int getMin()
    {
        int x = min.pop();
        min.push(x);
        return x;
    }
  
    /* Driver program to test SpecialStack 
methods */
    public static void main(String[] args)
    {
        SpecialStack s = new SpecialStack();
        s.push(10);
        s.push(20);
        s.push(30);
        System.out.println(s.getMin());
        s.push(5);
        System.out.println(s.getMin());
    }
}
// This code is contributed by Sumit Ghosh
Output
10
5
CPP-STL-Self-Paced-Course

Complexity Analysis: 

Time Complexity: 
For insert operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For delete operation: O(1) (As deletion ‘pop’ in a stack takes constant time)
For ‘Get Min’ operation: O(1) (As we have used an auxiliary stack which has it’s top as the minimum element)
Auxiliary Space: O(n). 
Use of auxiliary stack for storing values.
Space Optimized Version 

====================================

The above approach can be optimized. We can limit the number of elements in the auxiliary stack. 
We can push only when the incoming element of the main stack is smaller than or equal to the top of the auxiliary stack. 
Similarly during pop, if the pop-off element equal to the top of the auxiliary stack, remove the top element of the auxiliary stack.
Following is the modified implementation of push() and pop(). 


/* SpecialStack's member method to 
insert an element to it. This method
makes sure that the min stack is 
also updated with appropriate minimum
values */
  
void push(int x)
{
    if (isEmpty() == true) {
        super.push(x);
        min.push(x);
    }
    else {
        super.push(x);
        int y = min.pop();
        min.push(y);
  
        /* push only when the incoming 
           element of main stack is smaller 
        than or equal to top of auxiliary stack */
        if (x <= y)
            min.push(x);
    }
}
  
/* SpecialStack's member method to 
   remove an element from it. This method
   removes top element from min stack also. */
public Integer pop()
{
    int x = super.pop();
    int y = min.pop();
  
    /* Push the popped element y back 
       only if it is not equal to x */
    if (y != x)
        min.push(y);
    return x;
}
  
// This code is contributed by Sumit Ghosh
Complexity Analysis:  

Time Complexity: 
For Insert operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For Delete operation: O(1) (As deletion ‘pop’ in a stack takes constant time)
For ‘Get Min’ operation: O(1) (As we have used an auxiliary which has it’s top as the minimum element)
Auxiliary Space: O(n). 
The complexity in the worst case is the same as above but in other cases, it will take slightly less space than the above approach as repetition is neglected.


=========================================================
Further optimized O(1) time complexity and O(1) space complexity solution :
The above approach can be optimized further and the solution can be made to work in O(1) time complexity and O(1) space complexity. 
The idea is to store min element found till current insertion) along with all the elements as a 
reminder of a DUMMY_VALUE, and the actual element as a multiple of the DUMMY_VALUE.
For example, while pushing an element ‘e’ into the stack, store it as (e * DUMMY_VALUE + minFoundSoFar), this way we know what was the minimum value present
in the stack at the time ‘e’ was being inserted.

To pop the actual value just return e/DUMMY_VALUE and set the new minimum as (minFoundSoFar % DUMMY_VALUE).

Note: Following method will fail if we try to insert DUMMY_VALUE in the stack, so we have to make our selection of DUMMY_VALUE carefully.
Let’s say the following elements are being inserted in the stack – 3 2 6 1 8 5

d is dummy value.

s is wrapper stack

top is top element of the stack

min is the minimum value at that instant when the elements were inserted/removed

The following steps shows the current state of the above variables at any instant – 

s.push(3);
min=3 //updated min as stack here is empty 
s = {3*d + 3}
top = (3*d + 3)/d = 3 
 
s.push(2);
min = 2 //updated min as min > current element
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
 
s.push(6);
min = 2
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
 
s.push(1);
min = 1 //updated min as min > current element
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1}
top = (1*d + 1)/d = 1
 
s.push(8);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
 
s.push(5);
min = 1
s = {3*d + 3-> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
 
s.pop();
s = {3*d + 3 -> 2*d + 2 -> 6*d + 2 -> 1*d + 1 -> 8*d + 1 -> 5*d + 1}
top = (5*d + 1)/d = 5
min = (8*d + 1)%d = 1 // min is always remainder of the second top element in stack.
 
s.pop();
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1 -> 8*d + 1}
top = (8*d + 1)/d = 8
min = (1*d + 1)%d = 1
 
s.pop()
s = {3*d + 3 -> 2*d + 2-> 6*d + 2 -> 1*d + 1} 
top = (1*d + 1)/d = 1
min = (6*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2-> 6*d + 2}
top = (6*d + 2)/d = 6
min = (2*d + 2)%d = 2
 
s.pop()
s = {3*d + 3-> 2*d + 2}
top = (2*d + 2)/d = 2
min = (3*d + 3)%d = 3
 
s.pop()
s = {3*d + 3}
top = (3*d + 3)/d = 3
min  = -1 // since stack is now empty

import java.util.Stack;
  
/* A special stack having peek() pop() and push() along with
 * additional getMin() that returns minimum value in a stack
 * without using extra space and all operations in O(1)
 * time.. 🙂
 * */
public class SpecialStack {
  
    int min = -1; // sentinel value for min
    static int demoVal = 9999; // DEMO_VALUE
    Stack<Integer> st = new Stack<Integer>();
  
    void getMin() { System.out.println("min is: " + min); }
  
    void push(int val)
    {
        // if stack is empty OR current element is less than
        // min, update min..
        if (st.isEmpty() || val < min) {
            min = val;
        }
  
        st.push(val * demoVal
                + min); // encode the current value with
                        // demoVal, combine with min and
                        // insert into stack
        System.out.println("pushed: " + val);
    }
  
    int pop()
    {    
        // if stack is empty return -1;
        if (st.isEmpty() ) {
             System.out.println("stack underflow"); 
               return -1;
          }
        
        int val = st.pop();
  
        if (!st.isEmpty()) // if stack is empty, there would
                           // be no min value present, so
                           // make min as -1
            min = st.peek() % demoVal;
        else
            min = -1;
        System.out.println("popped: " + val / demoVal);
        return val / demoVal; // decode actual value from
                              // encoded value
    }
  
    int peek()
    {
        return st.peek() / demoVal; // decode actual value
                                    // from encoded value
    }
  
    // Driver Code
    public static void main(String[] args)
    {
        SpecialStack s = new SpecialStack();
  
        int[] arr = { 3, 2, 6, 1, 8, 5, 5, 5, 5 };
  
        for (int i = 0; i < arr.length; i++) {
            s.push(arr[i]);
            s.getMin();
        }
        System.out.println();
        for (int i = 0; i < arr.length; i++) {
            s.pop();
            s.getMin();
        }
    }
}
Output
pushed: 3
min is: 3
pushed: 2
min is: 2
pushed: 6
min is: 2
pushed: 1
min is: 1
pushed: 8
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1
pushed: 5
min is: 1

popped: 5
min is: 1
popped: 5
min is: 1
popped: 5
min is: 1
popped: 5
min is: 1
popped: 8
min is: 1
popped: 1
min is: 2
popped: 6
min is: 2
popped: 2
min is: 3
popped: 3
min is: -1
Complexity Analysis:  

For push() operation: O(1) (As insertion ‘push’ in a stack takes constant time)
For pop() operation: O(1) (As pop operation in a stack takes constant time)

For ‘Get Min’ operation: O(1) (As we have maintained min variable throughout the code)

Auxiliary Space: O(1). No extra space is used.
