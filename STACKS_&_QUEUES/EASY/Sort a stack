Given a stack, the task is to sort it such that the top of the stack has the greatest element.

Example 1:

Input:
Stack: 3 2 1
Output: 3 2 1
Example 2:

Input:
Stack: 11 2 32 3 41
Output: 41 32 11 3 2
Your Task: 
You don't have to read input or print anything. Your task is to complete the function sort() which sorts 
the elements present in the given stack. (The sorted stack is printed by the driver's code by popping the elements of the stack.)

Expected Time Complexity: O(N*N)
Expected Auxilliary Space: O(N) recursive.

Constraints:
1<=N<=100

MY_SOLUTION

class GfG{
	public Stack<Integer> sort(Stack<Integer> s)
	{
		int[] a=new int[100000];
		for(int i=0;i<100000;i++){
			a[i]=0;
		}
		while(!s.empty()){
			a[s.peek()]++;
			s.pop();
		}
		for(int i=0;i<100000;i++){
			if(a[i]>0){
				for(int j=0;j<a[i];j++){
					s.push(i);
				}
			}
		}
		return s;
	}
}

=========================================================================

How to Sort a Stack Using Stack

The idea of the solution is to hold all values in Function Call Stack until the stack becomes empty. 
When the stack becomes empty, insert all held items one by one in sorted order. 
and then print the stack

Illustration: 

Below is the illustration of above approach

Let given stack be
         -3         

         14
         18
         -5
         30
         
Let us illustrate sorting of stack using the above example:
First pop all the elements from the stack and store popped element in the variable ‘temp’.
After popping all the elements function’s stack frame will look like this:
 
-3	stack frame 1 
14	stack frame 2
18	stack frame 3
-5	stack frame 4
30	stack frame 5

Now stack is empty so function insert in sorted order is called and it inserts 30 (from stack frame 5) at the bottom of the stack. 
Now stack looks like the below:

         30         
         
Now next element  -5 (from stack frame 4) is picked. Since -5 < 30, -5 is inserted at the bottom of the stack.
Now stack becomes: 

         30         
         -5
         
Next 18 (from stack frame 3) is picked. Since 18 < 30, 18 is inserted below 30. Now stack becomes:

         30         
         18
         -5
         
Next 14 (from stack frame 2) is picked. Since 14 < 30 and 14 < 18, it is inserted below 18. Now stack becomes: 

         30
         18
         14
         -5  
         
Now -3 (from stack frame 1) is picked, as -3 < 30 and -3 < 18 and -3 < 14, it is inserted below 14. Now stack becomes:

         30          
         18
         14
         -3
         -5
         
Follow the steps mentioned below to implement the idea:

Create a stack and push all the elements in it.
Call sortStack(), which will pop an element from the stack and pass the popped element to function sortInserted(), 
  then it will keep calling itself until the stack is empty.
Whenever sortInserted() is called it will insert the passed element in stack in sorted order.
Print the stack     

Below is the implementation of the above approach:

// Java program to sort a Stack using recursion
// Note that here predefined Stack class is used
// for stack operation
 
import java.util.ListIterator;
import java.util.Stack;
 
class Test {
    // Recursive Method to insert an item x in sorted way
    static void sortedInsert(Stack<Integer> s, int x)
    {
        // Base case: Either stack is empty or newly
        // inserted item is greater than top (more than all
        // existing)
        if (s.isEmpty() || x > s.peek()) {
            s.push(x);
            return;
        }
 
        // If top is greater, remove the top item and recur
        int temp = s.pop();
        sortedInsert(s, x);
 
        // Put back the top item removed earlier
        s.push(temp);
    }
 
    // Method to sort stack
    static void sortStack(Stack<Integer> s)
    {
        // If stack is not empty
        if (!s.isEmpty()) {
            // Remove the top item
            int x = s.pop();
 
            // Sort remaining stack
            sortStack(s);
 
            // Push the top item back in sorted stack
            sortedInsert(s, x);
        }
    }
 
    // Utility Method to print contents of stack
    static void printStack(Stack<Integer> s)
    {
        ListIterator<Integer> lt = s.listIterator();
 
        // forwarding
        while (lt.hasNext())
            lt.next();
 
        // printing from top to bottom
        while (lt.hasPrevious())
            System.out.print(lt.previous() + " ");
    }
 
    // Driver code
    public static void main(String[] args)
    {
        Stack<Integer> s = new Stack<>();
        s.push(30);
        s.push(-5);
        s.push(18);
        s.push(14);
        s.push(-3);
 
        System.out.println(
            "Stack elements before sorting: ");
        printStack(s);
 
        sortStack(s);
 
        System.out.println(
            " \n\nStack elements after sorting:");
        printStack(s);
    }
}
Output
Stack elements before sorting:
-3 14 18 -5 30 

Stack elements after sorting:
30 18 14 -3 -5 
Time Complexity: O(N2). 
Auxiliary Space: O(N) use of Stack

=============================================================================
Sort a stack using recursion

Given a stack, sort it using recursion. Use of any loop constructs like while, for..etc is not allowed. 
We can only use the following ADT functions on Stack S:

is_empty(S)  : Tests whether stack is empty or not.
push(S)         : Adds new element to the stack.
pop(S)         : Removes top element from the stack.
top(S)         : Returns value of the top element. Note that this
               function does not remove element from the stack.


Example:
Input:  -3  <--- Top
        14 
        18 
        -5 
        30 

Output: 30  <--- Top
        18 
        14 
        -3 
        -5 




This problem is mainly a variant of Reverse stack using recursion.

The idea of the solution is to hold all values in Function Call Stack until the stack becomes empty.
When the stack becomes empty, insert all held items one by one in sorted order.
Here sorted order is important.


Algorithm
We can use below algorithm to sort stack elements:
sortStack(stack S)
    if stack is not empty:
        temp = pop(S);  
        sortStack(S); 
        sortedInsert(S, temp);



Below algorithm is to insert element is sorted order:

sortedInsert(Stack S, element)
    if stack is empty OR element > top element
        push(S, elem)
    else
        temp = pop(S)
        sortedInsert(S, element)
        push(S, temp)


Illustration:
Let given stack be
-3    <-- top of the stack
14
18
-5
30 


Let us illustrate sorting of stack using above example:

First pop all the elements from the stack and store poped element in variable 'temp'. 
After poping all the elements function's stack frame will look like:
temp = -3    --> stack frame #1
temp = 14    --> stack frame #2
temp = 18    --> stack frame #3
temp = -5    --> stack frame #4
temp = 30       --> stack frame #5


Now stack is empty and 'insert_in_sorted_order()' function is called and it inserts 30 (from stack frame #5) at the bottom of the stack.
Now stack looks like below:

30    <-- top of the stack 


Now next element i.e. -5 (from stack frame #4) is picked. Since -5 < 30, -5 is inserted at the bottom of stack. Now stack becomes:
30    <-- top of the stack
-5


Next 18 (from stack frame #3) is picked. Since 18 < 30, 18 is inserted below 30. Now stack becomes:
30    <-- top of the stack
18    
-5


Next 14 (from stack frame #2) is picked. Since 14 < 30 and 14 < 18, it is inserted below 18. 
Now stack becomes:
30    <-- top of the stack
18
14    
-5


Now -3 (from stack frame #1) is picked, as -3 < 30 and -3 < 18 and -3 < 14, it is inserted below 14.
Now stack becomes:
30    <-- top of the stack
18
14
-3    
-5



Implementation:
Below is the implementation of above algorithm.

// Java program to sort a Stack using recursion
// Note that here predefined Stack class is used
// for stack operation

import java.util.ListIterator;
import java.util.Stack;

class Test
{
    // Recursive Method to insert an item x in sorted way
    static void sortedInsert(Stack<Integer> s, int x)
    {
        // Base case: Either stack is empty or newly inserted
        // item is greater than top (more than all existing)
        if (s.isEmpty() || x > s.peek())
        {
            s.push(x);
            return;
        }
     
        // If top is greater, remove the top item and recur
        int temp = s.pop();
        sortedInsert(s, x);
     
        // Put back the top item removed earlier
        s.push(temp);
    }
     
    // Method to sort stack
    static void sortStack(Stack<Integer> s)
    {
        // If stack is not empty
        if (!s.isEmpty())
        {
            // Remove the top item
            int x = s.pop();
     
            // Sort remaining stack
            sortStack(s);
     
            // Push the top item back in sorted stack
            sortedInsert(s, x);
        }
    }
    
    // Utility Method to print contents of stack
    static void printStack(Stack<Integer> s)
    {
       ListIterator<Integer> lt = s.listIterator();
       
       // forwarding
       while(lt.hasNext())
           lt.next();
       
       // printing from top to bottom
       while(lt.hasPrevious())
           System.out.print(lt.previous()+" ");
    }
  
    // Driver method 
    public static void main(String[] args) 
    {
        Stack<Integer> s = new Stack<>();
        s.push(30);
        s.push(-5);
        s.push(18);
        s.push(14);
        s.push(-3);
     
        System.out.println("Stack elements before sorting: ");
        printStack(s);
     
        sortStack(s);
     
        System.out.println(" \n\nStack elements after sorting:");
        printStack(s);
     
    }
}

Output:
Stack elements before sorting:
-3 14 18 -5 30 

Stack elements after sorting:
30 18 14 -3 -5 

=========================================

Sort a stack using a temporary stack


Given a stack of integers, sort it in ascending order using another temporary stack.
Examples:
Input : [34, 3, 31, 98, 92, 23]
Output : [3, 23, 31, 34, 92, 98]

Input : [3, 5, 1, 4, 2, 8]
Output : [1, 2, 3, 4, 5, 8]





We follow this algorithm.
Create a temporary stack say tmpStack.
While input stack is NOT empty do this:
Pop an element from input stack call it temp
while temporary stack is NOT empty and top of temporary stack is greater than temp, pop from temporary stack and push it to the input stack
push temp in temporary stack
The sorted numbers are in tmpStack


Here is a dry run of above pseudo code.
Input: [34, 3, 31, 98, 92, 23]

Element taken out: 23
Input: [34, 3, 31, 98, 92]
tmpStack: [23]

Element taken out: 92
Input: [34, 3, 31, 98]
tmpStack: [23, 92]

Element taken out: 98
Input: [34, 3, 31]
tmpStack: [23, 92, 98]

Element taken out: 31
input: [34, 3, 98, 92]
tmpStack: [23, 31]

Element taken out: 92
input: [34, 3, 98]
tmpStack: [23, 31, 92]

Element taken out: 98
input: [34, 3]
tmpStack: [23, 31, 92, 98]

Element taken out: 3
input: [34, 98, 92, 31, 23]
tmpStack: [3]

Element taken out: 23
input: [34, 98, 92, 31]
tmpStack: [3, 23]

Element taken out: 31
input: [34, 98, 92]
tmpStack: [3, 23, 31]

Element taken out: 92
input: [34, 98]
tmpStack: [3, 23, 31, 92]

Element taken out: 98
input: [34]
tmpStack: [3, 23, 31, 92, 98]

Element taken out: 34
input: [98, 92]
tmpStack: [3, 23, 31, 34]

Element taken out: 92
input: [98]
tmpStack: [3, 23, 31, 34, 92]

Element taken out: 98
input: []
tmpStack: [3, 23, 31, 34, 92, 98]

final sorted list: [3, 23, 31, 34, 92, 98]



// Java program to sort a stack using 
// a auxiliary stack.
import java.util.*;

class SortStack
{
    // This function return the sorted stack
    public static Stack<Integer> sortstack(Stack<Integer> 
                                             input)
    {
        Stack<Integer> tmpStack = new Stack<Integer>();
        while(!input.isEmpty())
        {
            // pop out the first element
            int tmp = input.pop();
        
            // while temporary stack is not empty and
            // top of stack is greater than temp
            while(!tmpStack.isEmpty() && tmpStack.peek() 
                                                 > tmp)
            {
                // pop from temporary stack and 
                // push it to the input stack
            input.push(tmpStack.pop());
            }
            
            // push temp in tempory of stack
            tmpStack.push(tmp);
        }
        return tmpStack;
    }
    
    // Driver Code
    public static void main(String args[])
    {
        Stack<Integer> input = new Stack<Integer>();
        input.add(34);
        input.add(3);
        input.add(31);
        input.add(98);
        input.add(92);
        input.add(23);
    
        // This is the temporary stack
        Stack<Integer> tmpStack=sortstack(input);
        System.out.println("Sorted numbers are:");
    
        while (!tmpStack.empty())
        {
            System.out.print(tmpStack.pop()+" ");
        } 
    }
}
// This code is contributed by Danish Kaleem

Output:
Sorted numbers are:
3 23 31 34 92 98 

====================================================================
class GfG{
    public Stack<Integer> sort(Stack<Integer> s)
    {
        //add code here.
       
        Stack<Integer> ans = new Stack<>();
        Stack<Integer> helper = new Stack<>();
        while(s.size()>0){
            int val = s.pop();
            if(ans.size()==0 || ans.peek()<=val){
                ans.push(val);
            }
            else{
                while(ans.size()>0 && ans.peek()>val){
                    helper.push(ans.pop());
                }
                ans.push(val);
                while(helper.size()>0){
                    ans.push(helper.pop());
                }
            }
        }
        return ans;
    }
}

=========================================================================

class GfG{

    public void SortAnStack(Stack<Integer> stack) {

        if(stack.isEmpty()){

            return;

        }

        int element= stack.peek();

        stack.pop();

        SortAnStack(stack);

        PushBackIntoStack(stack, element);

    }

    public void PushBackIntoStack(Stack<Integer> stack, int element){

        if(stack.isEmpty()){

            stack.push(element);

            return;

        }

        if(stack.peek() > element){

            int peekElement  = stack.peek();

            stack.pop();

            PushBackIntoStack(stack, element);

            stack.push(peekElement);

        }

        else{

            stack.push(element);

        }

        

    }

 public Stack<Integer> sort(Stack<Integer> s)

 {

 //add code here.

 SortAnStack(s);

 return s;

 }

}
