What is a Circular Queue?

A Circular Queue is a special version of queue where the last element of the queue is
connected to the first element of the queue forming a circle.

The operations are performed based on FIFO (First In First Out) principle. 
It is also called ‘Ring Buffer’. 

In a normal Queue, we can insert elements until queue becomes full. 
But once queue becomes full, we can not insert the next element even if there is a space in front of queue.

MY_SOLUTION

Using Array
In this approach, we will be implementing a circular queue using arrays.
A circular queue has two key methods or purpose:

 

1.enqueue():
-> Check whether the queue is full.
    -> A queue is full when the front is next to the rear. 
       For example, with a queue of size 6, if front is 0 and rear is 5, or if front is 2 and rear is 1, it means that the queue is full.
    -> If it is full, then return false.
    -> If the queue is not full, then check if rear is the last index.
      -> If it is, set rear to 0;
      -> If it is not, increment rear and add the value at that index.

2.dequeue():
-> Check whether the queue is empty (i.e., if front/rear has a value of -1).
    -> If it is empty, the return -1.
    -> If the queue is not empty, then check if the queue has only one value (i.e., front == rear).
      -> If it does have only one value, set both rear and front to -1.
      -> If it does not, check if front is the last index of the queue and, if so, set front to 0, otherwise, increment front.
Time Complexity : O(1).
Since we do not need to iterate in order to perform these methods, so the time complexity is O(1).

Space Complexity : O(N), where ‘N’ is the size of the queue.

Since array used for storing the values makes the space complexity to be O(N).

/*
	Time complexity: O(1) for all operations.
	Space Complexity: O(N)
	
	Where 'N' is the size of the queue.  
*/

import java.util.ArrayList;

public class CircularQueue {
	// Initialise front and rear of the queue.
	private int rear, front;

	// Size of the queue.
	private int d;

	// Array To be used for the implementation.
	private ArrayList<Integer> arr;

	// Initialize your data structure..
	public CircularQueue(int n) {
		d = n;

		// For a circular queue the front and rear both start as empty.
		front = rear = -1;

		// Create the arrays..
		arr = new ArrayList<Integer>(d);
		for (int i = 0; i < d; i++) {
			arr.add(0);
		}
	}

	// Enqueues 'X' into the Queue. Returns true if it gets enqueued into the queue and false otherwise..
	public boolean enqueue(int value) {
		if ((front == 0 && rear == d - 1) || (rear == (front - 1) % (d - 1))) {
			/*
			  If the queue is full, no more elements can be added so return false.
			   Queue will be full if front is at 1st element and rear is at last element.
			   OR if rear is equal to front - 1.
			*/
			return false;
		}

		else if (front == -1) {
			// Queue is empty, hence insert the first element.
			front = rear = 0;
			arr.set(rear, value);
		}
		else if (rear == d - 1 && front != 0) {
			// If rear reaches end of queue but the first element is empty.
			rear = 0;
			arr.set(rear, value);
		}
		else {
			// Otherwise simply enqueue the element.
			rear++;
			arr.set(rear, value);
		}
		return true;
	}
	/*
	   Dequeues top element from Mth Queue. Returns -1 if the queue is empty,
	   otherwise returns the dequeued element.
	*/
	public int dequeue() {
		if (front == -1) {
			// If queue is empty.
			return -1;
		}
		// Initialise element to store dequeud element.
		int data = arr.get(front);
		arr.set(front, -1);

		if (front == rear) {
			// If the queue has only one element.
			front = -1;
			rear = -1;
		}
		else if (front == d - 1) {
			// If front is the last element of the queue.
			front = 0;
		}
		else {
			// In all other cases simply dequeue.
			front++;
		}
		// Return the dequeued element.
		return data;
	}
};

====================================================

Operations on Circular Queue:

-> Front: Get the front item from queue.
-> Rear: Get the last item from queue.

-> enQueue(value) This function is used to insert an element into the circular queue. 
   In a circular queue, the new element is always inserted at Rear position. 
    -> Check whether queue is Full – Check ((rear == SIZE-1 && front == 0) || (rear == front-1)).
    -> If it is full then display Queue is full.
       If queue is not full then, check if (rear == SIZE – 1 && front != 0) if it is true then set rear=0 and insert element.

-> deQueue() This function is used to delete an element from the circular queue. 
   In a circular queue, the element is always deleted from front position. 
    -> Check whether queue is Empty means check (front==-1).
    -> If it is empty then display Queue is empty. If queue is not empty then step 3
    -> Check if (front==rear) if it is true then set front=rear= -1 else check if (front==size-1), 
       if it is true then set front=0 and return the element.

Implementation:

// Java program for insertion and
// deletion in Circular Queue
import java.util.ArrayList;
 
class CircularQueue{
 
// Declaring the class variables.
private int size, front, rear;
 
// Declaring array list of integer type.
private ArrayList<Integer> queue = new ArrayList<Integer>();
 
// Constructor
CircularQueue(int size)
{
    this.size = size;
    this.front = this.rear = -1;
}
 
// Method to insert a new element in the queue.
public void enQueue(int data)
{
     
    // Condition if queue is full.
    if((front == 0 && rear == size - 1) ||
      (rear == (front - 1) % (size - 1)))
    {
        System.out.print("Queue is Full");
    }
 
    // condition for empty queue.
    else if(front == -1)
    {
        front = 0;
        rear = 0;
        queue.add(rear, data);
    }
 
    else if(rear == size - 1 && front != 0)
    {
        rear = 0;
        queue.set(rear, data);
    }
 
    else
    {
        rear = (rear + 1);
     
        // Adding a new element if
        if(front <= rear)
        {
            queue.add(rear, data);
        }
     
        // Else updating old value
        else
        {
            queue.set(rear, data);
        }
    }
}
 
// Function to dequeue an element
// form th queue.
public int deQueue()
{
    int temp;
 
    // Condition for empty queue.
    if(front == -1)
    {
        System.out.print("Queue is Empty");
         
        // Return -1 in case of empty queue
        return -1;
    }
 
    temp = queue.get(front);
 
    // Condition for only one element
    if(front == rear)
    {
        front = -1;
        rear = -1;
    }
 
    else if(front == size - 1)
    {
        front = 0;
    }
    else
    {
        front = front + 1;
    }
     
    // Returns the dequeued element
    return temp;
}
 
// Method to display the elements of queue
public void displayQueue()
{
     
    // Condition for empty queue.
    if(front == -1)
    {
        System.out.print("Queue is Empty");
        return;
    }
 
    // If rear has not crossed the max size
    // or queue rear is still greater then
    // front.
    System.out.print("Elements in the " +
                     "circular queue are: ");
 
    if(rear >= front)
    {
     
        // Loop to print elements from
        // front to rear.
        for(int i = front; i <= rear; i++)
        {
            System.out.print(queue.get(i));
            System.out.print(" ");
        }
        System.out.println();
    }
 
    // If rear crossed the max index and
    // indexing has started in loop
    else
    {
         
        // Loop for printing elements from
        // front to max size or last index
        for(int i = front; i < size; i++)
        {
            System.out.print(queue.get(i));
            System.out.print(" ");
        }
 
        // Loop for printing elements from
        // 0th index till rear position
        for(int i = 0; i <= rear; i++)
        {
            System.out.print(queue.get(i));
            System.out.print(" ");
        }
        System.out.println();
    }
}
 
// Driver code
public static void main(String[] args)
{
     
    // Initialising new object of
    // CircularQueue class.
    CircularQueue q = new CircularQueue(5);
     
    q.enQueue(14);
    q.enQueue(22);
    q.enQueue(13);
    q.enQueue(-6);
     
    q.displayQueue();
 
    int x = q.deQueue();
 
    // Checking for empty queue.
    if(x != -1)
    {
        System.out.print("Deleted value = ");
        System.out.println(x);
    }
 
    x = q.deQueue();
 
    // Checking for empty queue.
    if(x != -1)
    {
        System.out.print("Deleted value = ");
        System.out.println(x);
    }
 
    q.displayQueue();
     
    q.enQueue(9);
    q.enQueue(20);
    q.enQueue(5);
     
    q.displayQueue();
     
    q.enQueue(20);
}
}
 
Output
Elements in Circular Queue are: 14 22 13 -6 
Deleted value = 14
Deleted value = 22
Elements in Circular Queue are: 13 -6 
Elements in Circular Queue are: 13 -6 9 20 5 
Queue is Full

Time Complexity: Time complexity of enQueue(), deQueue() operation is O(1) as there is no loop in any of the operation.

Applications:
-> Memory Management: The unused memory locations in the case of ordinary queues can be utilized in circular queues.
-> Traffic system: In computer controlled traffic system, circular queues are used to switch on the traffic lights one by one repeatedly as per the time set.
-> CPU Scheduling: Operating systems often maintain a queue of processes that are ready to execute or that are waiting for a particular event to occur.
