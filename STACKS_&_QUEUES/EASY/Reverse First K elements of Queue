Given an integer K and a queue of integers, we need to reverse the order of the first K elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.
Note: The above operations represent the general processings. In-built functions of the respective languages can be used to solve the problem.
Example 1:

Input:
5 3
1 2 3 4 5

Output: 
3 2 1 4 5

Explanation: 
After reversing the given
input from the 3rd position the resultant
output will be 3 2 1 4 5.

Example 2:

Input:
4 4
4 3 2 1

Output: 
1 2 3 4

Explanation: 
After reversing the given
input from the 4th position the resultant
output will be 1 2 3 4.
Your Task:
Complete the provided function modifyQueue that takes queue and k as parameters and returns a modified queue. 
The printing is done automatically by the driver code.

Expected Time Complexity : O(N)
Expected Auxiliary Space : O(K)

Constraints:
1 <= N <= 1000
1 <= K <= N

MY_SOLUTION

class GfG {
    // Function to reverse first k elements of a queue.
    public Queue<Integer> modifyQueue(Queue<Integer> q, int k) {
        // using a stack and another queue to reverse first k elements.
        Stack<Integer> s = new Stack<>();
        Queue<Integer> qq = new LinkedList<>();

        // we pop first k elements from queue and push it in the stack.
        while (k-- > 0) {
            int a = q.peek();
            q.poll();
            s.push(a);
        }
        // while stack is not empty, we push the elements into the new queue.
        while (!s.isEmpty()) {
            int a = s.peek();
            s.pop();
            qq.add(a);
        }
        // then we add rest of the elements of original queue to the new queue.
        while (!q.isEmpty()) {
            int a = q.peek();
            q.poll();
            qq.add(a);
        }
        // returning the new queue.
        return qq;
    }
}

=======================================================

class GfG {
    // Function to reverse first k elements of a queue.
    public Queue<Integer> modifyQueue(Queue<Integer> q, int k) {
        // add code here.
        Stack<Integer> st = new Stack<>();
        
        while(k-- > 0){
            int ele = q.peek();
            q.poll();
            st.push(ele);
        }
        
        /*
        if(q.size() == k && q.isEmpty()){
            while(!st.isEmpty()){
                int ele = st.peek();
                st.pop();
                q.offer(ele);
            }
            return q;
        }
        */
        
        Queue<Integer> temp = new LinkedList<>();
        
        while(!q.isEmpty()){
            temp.offer(q.poll());
        }
        
        while(!st.isEmpty()){
                int ele = st.peek();
                st.pop();
                q.offer(ele);
            }
        
        while(!temp.isEmpty()){
            q.offer(temp.poll());
        }   
        
        return q;
        
        /*
        Stack<Integer> st=new Stack<>();

        for(int i=0;i<k;i++)

        {

            st.push(q.remove());

        }

        Queue<Integer> ans=new LinkedList<>();

        for(int i=0;i<k;i++)

        {

            ans.add(st.pop());

        }

        while(!q.isEmpty())

        {

            ans.add(q.remove());

        }

 

        return ans;
        */
    }
}
==================================================================

Approach: 

The idea is to use an auxiliary stack. Store the first k elements of the queue in a stack and pop it from the queue, 
then push it back to the queue and perform pop operation for n-k times and again push the popped element.

Follow the below steps to implement the idea:

-> Create an empty stack.
-> One by one dequeue first K items from given queue and push the dequeued items to stack.
-> Enqueue the contents of stack at the back of the queue
-> Dequeue (size-k) elements from the front and enqueue them one by one to the same queue.

Below is the implementation of above approach:


// Java program to reverse first k elements
// of a queue.
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
 
public class Reverse_k_element_queue {
 
    static Queue<Integer> queue;
 
    // Function to reverse the first
    // K elements of the Queue
    static void reverseQueueFirstKElements(int k)
    {
        if (queue.isEmpty() == true || k > queue.size())
            return;
        if (k <= 0)
            return;
 
        Stack<Integer> stack = new Stack<Integer>();
 
        // Push the first K elements into a Stack
        for (int i = 0; i < k; i++) {
            stack.push(queue.peek());
            queue.remove();
        }
 
        // Enqueue the contents of stack
        // at the back of the queue
        while (!stack.empty()) {
            queue.add(stack.peek());
            stack.pop();
        }
 
        // Remove the remaining elements and enqueue
        // them at the end of the Queue
        for (int i = 0; i < queue.size() - k; i++) {
            queue.add(queue.peek());
            queue.remove();
        }
    }
 
    // Utility Function to print the Queue
    static void Print()
    {
        while (!queue.isEmpty()) {
            System.out.print(queue.peek() + " ");
            queue.remove();
        }
    }
 
    // Driver code
    public static void main(String args[])
    {
        queue = new LinkedList<Integer>();
        queue.add(10);
        queue.add(20);
        queue.add(30);
        queue.add(40);
        queue.add(50);
        queue.add(60);
        queue.add(70);
        queue.add(80);
        queue.add(90);
        queue.add(100);
 
        int k = 5;
        reverseQueueFirstKElements(k);
        Print();
    }
}
Output
50 40 30 20 10 60 70 80 90 100 

Time Complexity: O(N + k), Where ‘n’ is the total number of elements in the queue and ‘k’ is the number of elements to be reversed. 
                 This is because firstly the whole queue is emptied into the stack and after that first ‘k’ elements are emptied and enqueued in the same way.
Auxiliary Space: O(k) where k is no of elements to be reversed since stack is being used to store values for the purpose of reversing.

