Implement a Queue using an Array. Queries in the Queue are of the following type:
(i) 1 x   (a query of this type means  pushing 'x' into the queue)
(ii) 2     (a query of this type means to pop element from queue and print the poped element)

Example 1:

Input:
Q = 5
Queries = 1 2 1 3 2 1 4 2
Output: 2 3
Explanation:
In the first test case for query 
1 2 the queue will be {2}
1 3 the queue will be {2 3}
2   poped element will be 2 the 
    queue will be {3}
1 4 the queue will be {3 4}
2   poped element will be 3 
Example 2:

Input:
Q = 4
Queries = 1 3 2 2 1 4   
Output: 3 -1
Explanation:
In the second testcase for query 
1 3 the queue will be {3}
2   poped element will be 3 the
    queue will be empty
2   there is no element in the
    queue and hence -1
1 4 the queue will be {4}. 
Your Task :
You are required to complete the two methods push() which take one argument an integer 'x' to be pushed into the queue and pop() 
which returns a integer poped out from othe queue. If the queue is empty, it should return -1 on a pop operation. 

Expected Time Complexity: O(1) for both push() and pop().
Expected Auxiliary Space: O(1) for both push() and pop().

Constraints:
1 ≤ Q ≤ 105
1 ≤ x ≤ 105


MY_SOLUTION

class MyQueue {

    int front;
    int rear;
	int arr[] = new int[100005];

    MyQueue()
	{
		front=0;
		rear=0;
	}
	
    //Function to push an element x in a queue.
	void push(int a)
	{
	    //inserting x in the queue at rear.
		arr[rear++]=a;
	} 

    //Function to pop an element from queue and return that element.
	int pop()
	{
	    //if front is equal to rear, queue is empty.
		if (front==rear)
			   return -1;
		//else we return the element at front.
		return arr[front++];
	} 
}


=================================================

-> Similar to Stack, Queue is a linear data structure that follows a particular order in which the operations are performed for storing data. 
-> The order is First In First Out (FIFO). 
-> One can imagine a queue as a line of people waiting to receive something in sequential order which starts from the beginning of the line. 
-> It is an ordered list in which insertions are done at one end which is known as the rear and deletions are done from the other end known as the front. 
-> A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. 
-> The difference between stacks and queues is in removing. 
-> In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.

Basic Operations on Queue: 
-> enqueue(): Inserts an element at the end of the queue i.e. at the rear end.
-> dequeue(): This operation removes and returns an element that is at the front end of the queue.
-> front(): This operation returns the element at the front end without removing it.
-> rear(): This operation returns the element at the rear end without removing it.
-> Empty(): This operation indicates whether the queue is empty or not.
-> size(): This operation returns the size of the queue i.e. the total number of elements it contains.  

Types of Queues: 
-> -> Simple Queue: Simple queue also known as a linear queue is the most basic version of a queue. 
                    Here, insertion of an element i.e. the Enqueue operation takes place at the rear end and removal of an element i.e. 
                    the Dequeue operation takes place at the front end.
-> Circular Queue:  In a circular queue, the element of the queue act as a circular ring. 
                    The working of a circular queue is similar to the linear queue except for the fact that the last element is connected to the first element. 
                    Its advantage is that the memory is utilized in a better way. This is because if there is an empty space i.e.
                    if no element is present at a certain position in the queue, then an element can be easily added at that position.
-> Priority Queue: This queue is a special type of queue. Its specialty is that it arranges the elements in a queue based on some priority. 
                   The priority can be something where the element with the highest value has the priority so it creates a queue with decreasing order of values.
                   The priority can also be such that the element with the lowest value gets the highest priority so in turn it creates a queue with 
                   increasing order of values.
-> Dequeue: Dequeue is also known as Double Ended Queue. As the name suggests double ended, it means that an element can be inserted or removed from both ends 
            of the queue, unlike the other queues in which it can be done only from one end. 
            Because of this property, it may not obey the First In First Out property.


Applications of Queue: 

Queue is used when things don’t have to be processed immediately, but have to be processed in First In First Out order like Breadth First Search. 
This property of Queue makes it also useful in following kind of scenarios.
-> When a resource is shared among multiple consumers. Examples include CPU scheduling, Disk Scheduling. 
-> When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. 
   Examples include IO Buffers, pipes, file IO, etc.  
-> Queue can be used as an essential component in various other data structures.
 
Array implementation Of Queue:
For implementing queue, we need to keep track of two indices, front and rear. 
We enqueue an item at the rear and dequeue an item from the front.
If we simply increment front and rear indices, then there may be problems, the front may reach the end of the array. 
The solution to this problem is to increase front and rear in circular manner.

Steps for enqueue:

-> Check the queue is full or not
-> If full, print overflow and exit
-> If queue is not full, increment tail and add the element

Steps for dequeue:

-> Check queue is empty or not
-> if empty, print underflow and exit
-> if not empty, print element at the head and increment head

Below is a program to implement above operation on queue


// Java program for array
// implementation of queue
 
// A class to represent a queue
class Queue {
    int front, rear, size;
    int capacity;
    int array[];
 
    public Queue(int capacity)
    {
        this.capacity = capacity;
        front = this.size = 0;
        rear = capacity - 1;
        array = new int[this.capacity];
    }
 
    // Queue is full when size becomes
    // equal to the capacity
    boolean isFull(Queue queue)
    {
        return (queue.size == queue.capacity);
    }
 
    // Queue is empty when size is 0
    boolean isEmpty(Queue queue)
    {
        return (queue.size == 0);
    }
 
    // Method to add an item to the queue.
    // It changes rear and size
    void enqueue(int item)
    {
        if (isFull(this))
            return;
        this.rear = (this.rear + 1)
                    % this.capacity;
        this.array[this.rear] = item;
        this.size = this.size + 1;
        System.out.println(item
                           + " enqueued to queue");
    }
 
    // Method to remove an item from queue.
    // It changes front and size
    int dequeue()
    {
        if (isEmpty(this))
            return Integer.MIN_VALUE;
 
        int item = this.array[this.front];
        this.front = (this.front + 1)
                     % this.capacity;
        this.size = this.size - 1;
        return item;
    }
 
    // Method to get front of queue
    int front()
    {
        if (isEmpty(this))
            return Integer.MIN_VALUE;
 
        return this.array[this.front];
    }
 
    // Method to get rear of queue
    int rear()
    {
        if (isEmpty(this))
            return Integer.MIN_VALUE;
 
        return this.array[this.rear];
    }
}
 
// Driver class
public class Test {
    public static void main(String[] args)
    {
        Queue queue = new Queue(1000);
 
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
 
        System.out.println(queue.dequeue()
                           + " dequeued from queue\n");
 
        System.out.println("Front item is "
                           + queue.front());
 
        System.out.println("Rear item is "
                           + queue.rear());
    }
}
 
Output
10 enqueued to queue
20 enqueued to queue
30 enqueued to queue
40 enqueued to queue
10 dequeued from queue
Front item is 20
Rear item is 40
Complexity Analysis:  
Time Complexity
Operations  	Complexity
Enqueue(insertion) 	O(1)
Deque(deletion)   	O(1)
Front(Get front)   	O(1)
Rear(Get Rear)	O(1)
                           

Auxiliary Space: 
O(N) where N is the size of the array for storing elements.

Advantages of Array Implementation:  
-> Easy to implement.
-> A large amount of data can be managed efficiently with ease.
-> Operations such as insertion and deletion can be performed with ease as it follows the first in first out rule.

Disadvantages of Array Implementation:  
-> Static Data Structure, fixed size.
-> If the queue has a large number of enqueue and dequeue operations, at some point (in case of linear increment of front and rear indexes) 
-> we may not be able to insert elements in the queue even if the queue is empty (this problem is avoided by using circular queue).
