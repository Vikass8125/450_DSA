Implement a Queue using 2 stacks s1 and s2 .
A Query Q is of 2 Types
(i) 1 x (a query of this type means  pushing 'x' into the queue)
(ii) 2   (a query of this type means to pop element from queue and print the poped element)

Example 1:

Input:
5
1 2 1 3 2 1 4 2

Output: 
2 3

Explanation: 
In the first testcase
1 2 the queue will be {2}
1 3 the queue will be {2 3}
2   poped element will be 2 the queue 
    will be {3}
1 4 the queue will be {3 4}
2   poped element will be 3.
Example 2:

Input:
4
1 2 2 2 1 4

Output: 
2 -1

Explanation: 
In the second testcase 
1 2 the queue will be {2}
2   poped element will be 2 and 
    then the queue will be empty
2   the queue is empty and hence -1
1 4 the queue will be {4}.
Your Task:
You are required to complete the two methods push which take one argument an integer 'x' to be pushed into the queue and pop which returns a 
integer poped out from other queue(-1 if the queue is empty). The printing is done automatically by the driver code.

Expected Time Complexity : O(1) for push() and O(N) for pop() or O(N) for push() and O(1) for pop()  
Expected Auxilliary Space : O(1).

Constraints:
1 <= Q <= 100
1 <= x <= 100

Note:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only.
As it is a function problem, hence a user should not read any input from stdin/console. 
The task is to complete the function specified, and not to write the full code.

MY_SOLUTION

class StackQueue
{
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    //Function to push an element in queue by using 2 stacks.
    void Push(int x)
    {
	   // Your code here
	   
	       s1.push(x);
	   
	   
    }
	
    
    //Function to pop an element from queue by using 2 stacks.
    int Pop()
    {
       if(s1.isEmpty()) return -1;
       
	   while(!s1.isEmpty()){
	       s2.push(s1.pop());
	   }
	   int val = s2.pop();;
	   
	   
	   while(!s2.isEmpty()){
	       s1.push(s2.pop());
	   }
	   
	   return val;
	   
	   
    }
}

============================================================

class StackQueue
{
   Stack<Integer> s1 = new Stack<Integer>();
   Stack<Integer> s2 = new Stack<Integer>();

   //Function to push an element in queue by using 2 stacks.
   void Push(int x)
   {
   // Your code here
   while(!s1.isEmpty()){
       s2.push(s1.pop());
   }
   
   s1.push(x);
   
    while(!s2.isEmpty()){
       s1.push(s2.pop());
   }
   
   }

   
   //Function to pop an element from queue by using 2 stacks.
   int Pop()
   {
   // Your code here
   if(s1.isEmpty()){
       return -1;
   }
   return s1.pop();
   }
}
=====================================================================

class StackQueue
{
	Stack<Integer> s1 = new Stack<Integer>();
	Stack<Integer> s2 = new Stack<Integer>();
	
	//Function to push an element in queue by using 2 stacks.
	void Push(int B)
	{
	    //inserting the element in first stack.
		s1.push(B);
	}
	
	//Function to pop an element from queue by using 2 stacks.
	int Pop()
	{
		if(s2.isEmpty())
		{
		    //if both stacks are empty, we return -1.
			if(s1.isEmpty())
				return -1;
			
			//we keep removing the top element from first stack and keep
            //pushing them in second stack. Thus, the order gets reversed.
			while(!s1.isEmpty())
			{
				int r = s1.peek();
				s1.pop();
				s2.push(r);
			}
			
			//second stack holds the elements in reversed order so we just store 
            //and then pop the element at top of the stack.
			int k = s2.peek();
			s2.pop();
			
			
			while(!s2.isEmpty())
			{
				int l = s2.peek();
				s2.pop();
				s1.push(l);
			}
			
			return k;
		}
		return -1;
	}
}

================================================================

The problem is opposite of this post. We are given a stack data structure with push and pop operations,
the task is to implement a queue using instances of stack data structure and operations on them.

A queue can be implemented using two stacks. 
Let queue to be implemented be q and stacks used to implement q be stack1 and stack2. q can be implemented in two ways: 

Method 1 (By making enQueue operation costly): This method makes sure that oldest entered element is always at the top of stack 1, 
so that deQueue operation just pops from stack1. To put the element at top of stack1, stack2 is used.

enQueue(q, x): 
  -> While stack1 is not empty, push everything from stack1 to stack2.
  -> Push x to stack1 (assuming size of stacks is unlimited).
  -> Push everything back to stack1.
  Here time complexity will be O(n)

deQueue(q): 
  -> If stack1 is empty then error
  -> Pop an item from stack1 and return it
Here time complexity will be O(1)

Below is the implementation of the above approach:  


// Java program to implement Queue using 
// two stacks with costly enQueue() 
import java.util.*;

class GFG 
{ 
static class Queue 
{ 
    static Stack<Integer> s1 = new Stack<Integer>(); 
    static Stack<Integer> s2 = new Stack<Integer>(); 

    static void enQueue(int x) 
    { 
        // Move all elements from s1 to s2 
        while (!s1.isEmpty())
        { 
            s2.push(s1.pop()); 
            //s1.pop(); 
        } 

        // Push item into s1 
        s1.push(x); 

        // Push everything back to s1 
        while (!s2.isEmpty()) 
        { 
            s1.push(s2.pop()); 
            //s2.pop(); 
        } 
    } 

    // Dequeue an item from the queue 
    static int deQueue() 
    { 
        // if first stack is empty 
        if (s1.isEmpty()) 
        { 
            System.out.println("Q is Empty"); 
            System.exit(0); 
        } 

        // Return top of s1 
        int x = s1.peek(); 
        s1.pop(); 
        return x; 
    } 
}; 

// Driver code 
public static void main(String[] args) 
{ 
    Queue q = new Queue(); 
    q.enQueue(1); 
    q.enQueue(2); 
    q.enQueue(3); 

    System.out.println(q.deQueue()); 
    System.out.println(q.deQueue());
    System.out.println(q.deQueue());
} 
} 

Output: 

1
2
3
Complexity Analysis: 

Time Complexity: 
  Push operation: O(N). 
  In the worst case we have empty whole of stack 1 into stack 2.
Pop operation: O(1). 
  Same as pop operation in stack.
Auxiliary Space: O(N). 
Use of stack for storing values.

===================================================================

Method 2 (By making deQueue operation costly): 
  In this method, in en-queue operation, the new element is entered at the top of stack1.
  In de-queue operation, if stack2 is empty then all the elements are moved to stack2 and finally top of stack2 is returned. 

enQueue(q,  x)
  1) Push x to stack1 (assuming size of stacks is unlimited).
Here time complexity will be O(1)

deQueue(q)
  1) If both stacks are empty then error.
  2) If stack2 is empty
       While stack1 is not empty, push everything from stack1 to stack2.
  3) Pop the element from stack2 and return it.
Here time complexity will be O(n)

Method 2 is definitely better than method 1. 

Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. 
So, the amortized complexity of the dequeue operation becomes \Theta (1)

Implementation of method 2:

/* Java Program to implement a queue using two stacks */
// Note that Stack class is used for Stack implementation

import java.util.Stack;

public class GFG {
    /* class of queue having two stacks */
    static class Queue {
        Stack<Integer> stack1;
        Stack<Integer> stack2;
    }

    /* Function to push an item to stack*/
    static void push(Stack<Integer> top_ref, int new_data)
    {
        // Push the data onto the stack
        top_ref.push(new_data);
    }

    /* Function to pop an item from stack*/
    static int pop(Stack<Integer> top_ref)
    {
        /*If stack is empty then error */
        if (top_ref.isEmpty()) {
            System.out.println("Stack Underflow");
            System.exit(0);
        }

        // pop the data from the stack
        return top_ref.pop();
    }

    // Function to enqueue an item to the queue
    static void enQueue(Queue q, int x)
    {
        push(q.stack1, x);
    }

    /* Function to deQueue an item from queue */
    static int deQueue(Queue q)
    {
        int x;

        /* If both stacks are empty then error */
        if (q.stack1.isEmpty() && q.stack2.isEmpty()) {
            System.out.println("Q is empty");
            System.exit(0);
        }

        /* Move elements from stack1 to stack 2 only if
        stack2 is empty */
        if (q.stack2.isEmpty()) {
            while (!q.stack1.isEmpty()) {
                x = pop(q.stack1);
                push(q.stack2, x);
            }
        }
        x = pop(q.stack2);
        return x;
    }

    /* Driver function to test above functions */
    public static void main(String args[])
    {
        /* Create a queue with items 1 2 3*/
        Queue q = new Queue();
        q.stack1 = new Stack<>();
        q.stack2 = new Stack<>();
        enQueue(q, 1);
        enQueue(q, 2);
        enQueue(q, 3);

        /* Dequeue items */
        System.out.print(deQueue(q) + " ");
        System.out.print(deQueue(q) + " ");
        System.out.println(deQueue(q) + " ");
    }
}
Output: 

1 2 3 
Complexity Analysis: 

Time Complexity: 
  Push operation: O(1). 
  Same as pop operation in stack.
Pop operation: 
  O(N) in general and O(1) amortized time complexity.
  In the worst case we have to empty the whole of stack 1 into stack 2 so its O(N).
  Amortized time is the way to express the time complexity when an algorithm has the very bad time complexity only once in a 
  while besides the time complexity that happens most of time.
  So its O(1) amortized time complexity, since we have to empty whole of stack 1 only when stack 2 is empty, rest of the times the pop operation takes O(1) time.
Auxiliary Space: O(N). 
Use of stack for storing values.

======================================================

Queue can also be implemented using one user stack and one Function Call Stack. 
Below is modified Method 2 where recursion (or Function Call Stack) is used to implement queue using only one user defined stack. 

enQueue(x)
  1) Push x to stack1.
deQueue:
  1) If stack1 is empty then error.
  2) If stack1 has only one element then return it.
  3) Recursively pop everything from the stack1, store the popped item 
    in a variable res,  push the res back to stack1 and return res
    
The step 3 makes sure that the last popped item is always returned and since the recursion stops when there is only one item in stack1 (step 2), 
we get the last element of stack1 in deQueue() and all other items are pushed back in step 

3. Implementation of method 2 using Function Call Stack:  


// Java Program to implement a queue using one stack

import java.util.Stack;

public class QOneStack {
    // class of queue having two stacks
    static class Queue {
        Stack<Integer> stack1;
    }

    /* Function to push an item to stack*/
    static void push(Stack<Integer> top_ref, int new_data)
    {
        /* put in the data */
        top_ref.push(new_data);
    }

    /* Function to pop an item from stack*/
    static int pop(Stack<Integer> top_ref)
    {
        /*If stack is empty then error */
        if (top_ref == null) {
            System.out.println("Stack Underflow");
            System.exit(0);
        }
        // return element from stack
        return top_ref.pop();
    }

    /* Function to enqueue an item to queue */
    static void enQueue(Queue q, int x)
    {
        push(q.stack1, x);
    }

    /* Function to deQueue an item from queue */
    static int deQueue(Queue q)
    {
        int x, res = 0;
        /* If the stacks is empty then error */
        if (q.stack1.isEmpty()) {
            System.out.println("Q is Empty");
            System.exit(0);
        }
        // Check if it is a last element of stack
        else if (q.stack1.size() == 1) {
            return pop(q.stack1);
        }
        else {

            /* pop an item from the stack1 */
            x = pop(q.stack1);

            /* store the last deQueued item */
            res = deQueue(q);

            /* push everything back to stack1 */
            push(q.stack1, x);
            return res;
        }
        return 0;
    }

    /* Driver function to test above functions */
    public static void main(String[] args)
    {
        /* Create a queue with items 1 2 3*/
        Queue q = new Queue();
        q.stack1 = new Stack<>();

        enQueue(q, 1);
        enQueue(q, 2);
        enQueue(q, 3);

        /* Dequeue items */
        System.out.print(deQueue(q) + " ");
        System.out.print(deQueue(q) + " ");
        System.out.print(deQueue(q) + " ");
    }
}
Output: 

1 2 3 

Complexity Analysis: 

Time Complexity: 
  Push operation : O(1). 
  Same as pop operation in stack.
Pop operation : O(N). 
  The difference from above method is that in this method element is returned and all elements are restored back in a single call.
Auxiliary Space: O(N). 
  Use of stack for storing values.
