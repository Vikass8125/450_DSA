Given an array Arr of size N such that each element is from the range 0 to 9.
Find the minimum possible sum of two numbers formed using the elements of the array. All digits in the given array must be used to form the two numbers.


Example 1:

Input:
N = 6
Arr[] = {6, 8, 4, 5, 2, 3}
Output: 604
Explanation: The minimum sum is formed 
by numbers 358 and 246.

Example 2:

Input:
N = 5
Arr[] = {5, 3, 0, 7, 4}
Output: 82
Explanation: The minimum sum is 
formed by numbers 35 and 047.

Your Task:
You don't need to read input or print anything. 
Your task is to complete the function solve() which takes arr[] and n as input parameters and returns the minimum possible sum. 
As the number can be large, return string presentation of the number without leading zeroes.
 

Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N ≤ 107
0 ≤ Arri ≤ 9


MY_SOLUTION

class Solution {
    String solve(int[] arr, int n) {
        // code here
        /*
        if(n == 1){
            return Integer.toString(arr[0]);
        }
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for(int i = 0; i < n; i++){
            minHeap.add(arr[i]);
        }
        
        //long firstNum = 0;
        //long secondNum = 0;
        boolean flag = true;
        
        
        String a = "", b = "";
        
        while(minHeap.size() != 0){
            if(flag == true){
                a += Integer.toString(minHeap.poll());
                //long first = minHeap.poll();
                //firstNum = firstNum * 10 + first;
                flag = false;
            }
            else{
                b += Integer.toString(minHeap.poll());
                //long second = minHeap.poll();
                //secondNum = secondNum * 10 + second;
                flag = true;
            }
        }
        long firstNum = Long.parseLong(a);
        long secondNum = Long.parseLong(b);
        return Long.toString(firstNum + secondNum);
        
        */
        
        
        
       Arrays.sort(arr);
       ArrayList<Integer> al1=new ArrayList<>();
       ArrayList<Integer> al2=new ArrayList<>();
       StringBuilder ss=new StringBuilder();
       for(int i=0; i<n; i+=2)
       {
           al1.add(arr[i]);
       }
       for(int i=1; i<n; i+=2)
       {
           al2.add(arr[i]);
       }
       int i=al1.size()-1;
       int j=al2.size()-1;
       int carray=0;
       while(i>=0 && j>=0)
       {
           int temp=al1.get(i)+al2.get(j)+carray;
           int rem=temp%10;
           carray=temp/10;
           ss.append(rem);
           i--;
           j--;
       }
       
       while(i>=0)
       {
           int temp=al1.get(i)+carray;
           int rem=temp%10;
           carray=temp/10;
           ss.append(rem);
           i--;
       }
       while(j>=0)
       {
           int temp=al1.get(j)+carray;
           int rem=temp%10;
           carray=temp/10;
           ss.append(rem);
           j--;
       }
       while(carray>=1)
       {
           ss.append(carray%10);
           carray=carray/10;
       }
       String anss=(ss.reverse()).toString();
       for(int ii=0; ii<anss.length(); ii++)
       {
           if(anss.charAt(ii)!='0')
           {
               return anss.substring(ii);
           }
       }
       return anss;
     
    }
}

=======================================

String solve(int[] arr, int n) {
        // code here
Arrays.sort(arr);int c=0;

	       String r="";
	       for(int i=n-1;i>=1;i=i-2){
	           if(arr[i]!=0){
	           int a=arr[i]+arr[i-1]+c;
	           r=(a%10)+r;
	           c=a/10;
	       }
	           else
	           break;
	       }
	       
	       if(n%2!=0 && c+arr[0]!=0) {
	    	   r=(c+arr[0])+r;
	       }
	       else if(c!=0)
	      r=c+r;
	      
	        return r;

    }
    
===================================================
class Solution {
     public String addTwoNumbers(final String n1, final String n2) {
        StringBuilder sb = new StringBuilder();
        int carry =0;
        byte[] nb1; byte[] nb2;
        if (n1.length() > n2.length()){
            nb1 = n1.getBytes();
            nb2 = n2.getBytes();
        } else {
            nb2 = n1.getBytes();
            nb1 = n2.getBytes();
        }

        int maxLen=n1.length()>=n2.length()?n1.length():n2.length();
        for (int i = 1; i <= maxLen ; i++) {
            int a = nb1.length-i >= 0 ? nb1[nb1.length-i] - 48 : 0;
            int b = nb2.length-i >= 0 ? nb2[nb2.length-i] - 48 : 0;
            int result = a + b + carry;

            if (result >= 10){
                carry = 1;
                result = result-10;
            } else {
                carry = 0;
            }
            sb.insert(0, result);
        }
        if(carry>0){
            sb.insert(0, carry);
        }
        return sb.toString();
    }
    String solve(int[] arr, int n) {
       Arrays.sort(arr);
      String sum1 = "",sum2 = "";
      for (int i=0;i<arr.length;i++)
      {
        if(i%2==0)
        {
            int p=arr[i];
            if(arr[i]==0&sum1.length()==0)
                continue;
            sum1+=String.valueOf(p);
        }
        else {
            int p=arr[i];
            if(arr[i]==0&sum2.length()==0)
                continue;
            sum2+=String.valueOf(p);

        }
      }
      return addTwoNumbers(sum1,sum2);
    }
}

==================================================
Minimum sum of two numbers formed from digits of an array using Sorting:

A minimum number will be formed from set of digits when smallest digit appears at most significant position and next smallest digit appears at next most 
significant position and so on. The idea is to sort the array in increasing order and build two numbers by alternating picking digits from the array. 
So first number is formed by digits present in odd positions in the array and second number is formed by digits from even positions in the array.

Follow the given steps to solve the problem:

Sort the array in increasing order
Declare two variables a and b, representing the two numbers to be formed
Traverse the array and if the index is odd then add this element into a, else add it to b
Return the sum of two variables (a + b)
Below is the Implementation of the above approach:
 


// Java program to find minimum sum of two numbers
// formed from digits of the array.
 
import java.util.Arrays;
 
class GFG {
 
    // Function to find and return minimum sum of
    // two numbers formed from digits of the array.
    static int solve(int arr[], int N)
    {
 
        // sort the array
        Arrays.sort(arr);
 
        // let two numbers be a and b
        int a = 0, b = 0;
        for (int i = 0; i < N; i++) {
 
            // fill a and b with every alternate
            // digit of input array
            if (i % 2 != 0)
                a = a * 10 + arr[i];
            else
                b = b * 10 + arr[i];
        }
 
        // return the sum
        return a + b;
    }
 
    // driver's code
    public static void main(String[] args)
    {
        int arr[] = { 6, 8, 4, 5, 2, 3 };
        int N = arr.length;
 
        System.out.print("Sum is " + solve(arr, N));
    }
}
 
Output
Sum is 604
Time Complexity: O(Nlog2N) bacause of arr.sort()  
Auxiliary Space: O(1)

===========================

Minimum sum of two numbers formed from digits of an array for large numbers using Strings:


The basic idea of approaching the question is the same as above, but instead of using numbers, strings will be used to handle sum of two large numbers

Follow the given steps to solve the problem:

Sort the array in increasing order
Declare two strings a and b, representing the two numbers to be formed
Traverse the array and if the index is odd then add this element into string a, else add it to the string b
Return the sum of two strings, in the form of a string
Below is the Implementation of the above approach:


// Java code for the above approach
 
import java.util.Arrays;
import java.util.Collections;
 
class Main {
 
    public static String reverseString(String str)
    {
 
        StringBuilder sb = new StringBuilder(str);
        sb.reverse();
        return sb.toString();
    }
 
    public static String solve(int[] arr, int N)
    {
 
        Arrays.sort(arr);
 
        // Two String for storing our two minimum numbers
        String a = "", b = "";
 
        for (int i = 0; i < N; i += 2) {
            a += Integer.toString(arr[i]);
        }
        for (int i = 1; i < N; i += 2) {
            b += Integer.toString(arr[i]);
        }
 
        int j = a.length() - 1;
        int k = b.length() - 1;
 
        // As initial carry is zero
        int carry = 0;
        String ans = "";
        while (j >= 0 && k >= 0) {
 
            int sum = 0;
            sum += (a.charAt(j) - '0') + (b.charAt(k) - '0')
                   + carry;
            int x = sum % 10;
            ans += Integer.toString(sum % 10);
            carry = sum / 10;
            j--;
            k--;
        }
 
        // If string b is over and string a is left
        // here we dont need to put here while condition
        // as it would run at max one time. Because the
        // difference between both the strings could be at
        // max 1.
        while (j >= 0) {
            int sum = 0;
            sum += (a.charAt(j) - '0') + carry;
            ans += Integer.toString(sum % 10);
            carry = sum / 10;
            j--;
        }
 
        // If string a is over and string b is left
        while (k >= 0) {
            int sum = 0;
            sum += (b.charAt(k) - '0') + carry;
            ans += Integer.toString(sum % 10);
            carry = sum / 10;
            k--;
        }
        // if carry is left
        if (carry != 0) {
            ans += Integer.toString(carry);
        }
 
        // to remove leading zeroes as they will be ahead of
        // our sum
        while (ans.isEmpty() == false
               && ans.charAt(ans.length() - 1) == '0')
            ans = ans.substring(0, ans.length() - 1);
 
        // reverse our final string because we were storing
        // sum from left to right
        ans = reverseString(ans);
        return ans;
    }
 
    // driver's code
    public static void main(String[] args)
    {
        int[] arr = { 6, 8, 4, 5, 2, 3 };
        int N = arr.length;
 
        // Function call
        System.out.print("Sum is " + solve(arr, N));
    }
}
 
Output
Sum is 604
Time complexity: O(Nlog2N) because we are sorting the given array.
Auxiliary Space: O(N) 
