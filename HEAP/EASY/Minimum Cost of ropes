There are given N ropes of different lengths, we need to connect these ropes into one rope. 
The cost to connect two ropes is equal to sum of their lengths. 
The task is to connect the ropes with minimum cost. Given N size array arr[] contains the lengths of the ropes. 

Example 1:

Input:
n = 4
arr[] = {4, 3, 2, 6}
Output: 
29
Explanation:
We can connect the ropes in following ways.
1) First connect ropes of lengths 2 and 3.
Which makes the array {4, 5, 6}. Cost of
this operation 2+3 = 5. 
2) Now connect ropes of lengths 4 and 5.
Which makes the array {9, 6}. Cost of
this operation 4+5 = 9.
3) Finally connect the two ropes and all
ropes have connected. Cost of this 
operation 9+6 =15
Total cost for connecting all ropes is 5
+ 9 + 15 = 29. This is the optimized cost
for connecting ropes. 
Other ways of connecting ropes would always 
have same or more cost. For example, if we 
connect 4 and 6 first (we get three rope of 3,
2 and 10), then connect 10 and 3 (we get
two rope of 13 and 2). Finally we
connect 13 and 2. Total cost in this way
is 10 + 13 + 15 = 38.
Example 2:

Input:
n = 5
arr[] = {4, 2, 7, 6, 9}
Output: 
62 
Explanation:
First, connect ropes 4 and 2, which makes
the array {6,7,6,9}. Cost of
this operation 4+2 = 6. Next, add ropes 
6 and 6, which results in {12,7,9}. 
Cost of this operation 6+6 = 12.
Then, add 7 and 9, which makes the array {12,16}. 
Cost of this operation 7+9 = 16. And
finally, add these two which gives {28}.
Hence, the total cost is 6 + 12 + 16 + 
28 = 62.
Your Task:
You don't need to read input or print anything.
Your task isto complete the function minCost() which takes an integer array arr[] and an integer n as arguments and returns the minimum cost.

Expected Time Complexity : O(nlogn)
Expected Auxilliary Space : O(n)

Constraints:
1 ≤ N ≤ 100000
1 ≤ arr[i] ≤ 106

MY_SOLUTION

class Solution
{
    //Function to return the minimum cost of connecting the ropes.
    long minCost(long arr[], int n) 
    {
        // your code here
        PriorityQueue<Long> minHeap = new PriorityQueue<>();
        
        for(int i = 0; i < n; i++){
            minHeap.add(arr[i]);
        }
        long ans = 0;
        while(minHeap.size() > 1){
            long first = minHeap.poll();
            long second = minHeap.poll();
            
            long sum = first + second;
            ans += sum;
            minHeap.add(sum);
        }
        return ans;
    }
}
=======================================================
class Solution
{
    //Function to return the minimum cost of connecting the ropes.
    long minCost(long arr[], int n) 
    {
        //implementing MinHeap using priority queue.
        PriorityQueue<Long> pq = new PriorityQueue<>();
         
        for (int i = 0; i < n; i++) pq.add(arr[i]);
        Long cost = new Long("0");
        
        //using a loop while there is more than one element in priority queue. 
        while (pq.size() != 1) 
        {
            //storing the first and second numbers from priority queue.
            long x = pq.poll();  
            long y = pq.poll(); 
            
            //adding their sum in result.
            cost += (x + y);
            
            //pushing the sum of first and second numbers in priority queue.
            pq.add(x + y); 
        }
        //returning the result.
        return cost;
    }
}

=================================================================
Connect N ropes with minimum cost using Min-Heap
Approach: 
  If we observe the above problem closely, we can notice that the lengths of the ropes which are picked first are included more than once in the total cost.
  Therefore, the idea is to connect the smallest two ropes first and recur for the remaining ropes.
  This approach is similar to Huffman Coding.
  We put the smallest ropes down the tree so they can be repeated multiple times rather than the longer ones.

Algorithm: Follow the steps mentioned below to implement the idea:

-> Create a min-heap and insert all lengths into the min-heap.
-> Do following while the number of elements in min-heap is greater than one. 
-> Extract the minimum and second minimum from min-heap
-> Add the above two extracted values and insert the added value to the min-heap.
-> Maintain a variable for total cost and keep incrementing it by the sum of extracted values.
-> Return the value of total cost.


Below is the implementation of the above approach:


// Java program to connect n
// ropes with minimum cost
 
// A class for Min Heap
class MinHeap {
    int[] harr; // Array of elements in heap
    int heap_size; // Current number of elements in min heap
    int capacity; // maximum possible size of min heap
 
    // Constructor: Builds a heap from
    // a given array a[] of given size
    public MinHeap(int a[], int size)
    {
        heap_size = size;
        capacity = size;
        harr = a;
        int i = (heap_size - 1) / 2;
        while (i >= 0) {
            MinHeapify(i);
            i--;
        }
    }
 
    // A recursive method to heapify a subtree
    // with the root at given index
    // This method assumes that the subtrees
    // are already heapified
    void MinHeapify(int i)
    {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && harr[l] < harr[i])
            smallest = l;
        if (r < heap_size && harr[r] < harr[smallest])
            smallest = r;
        if (smallest != i) {
            swap(i, smallest);
            MinHeapify(smallest);
        }
    }
 
    int parent(int i) { return (i - 1) / 2; }
 
    // to get index of left child of node at index i
    int left(int i) { return (2 * i + 1); }
 
    // to get index of right child of node at index i
    int right(int i) { return (2 * i + 2); }
 
    // Method to remove minimum element (or root) from min
    // heap
    int extractMin()
    {
        if (heap_size <= 0)
            return Integer.MAX_VALUE;
        if (heap_size == 1) {
            heap_size--;
            return harr[0];
        }
 
        // Store the minimum value, and remove it from heap
        int root = harr[0];
        harr[0] = harr[heap_size - 1];
        heap_size--;
        MinHeapify(0);
 
        return root;
    }
 
    // Inserts a new key 'k'
    void insertKey(int k)
    {
        if (heap_size == capacity) {
            System.out.println(
                "Overflow: Could not insertKey");
            return;
        }
 
        // First insert the new key at the end
        heap_size++;
        int i = heap_size - 1;
        harr[i] = k;
 
        // Fix the min heap property if it is violated
        while (i != 0 && harr[parent(i)] > harr[i]) {
            swap(i, parent(i));
            i = parent(i);
        }
    }
 
    // A utility function to check
    // if size of heap is 1 or not
    boolean isSizeOne() { return (heap_size == 1); }
 
    // A utility function to swap two elements
    void swap(int x, int y)
    {
        int temp = harr[x];
        harr[x] = harr[y];
        harr[y] = temp;
    }
 
    // The main function that returns the
    // minimum cost to connect n ropes of
    // lengths stored in len[0..n-1]
    static int minCost(int len[], int n)
    {
        int cost = 0; // Initialize result
 
        // Create a min heap of capacity equal
        // to n and put all ropes in it
        MinHeap minHeap = new MinHeap(len, n);
 
        // Iterate while size of heap doesn't become 1
        while (!minHeap.isSizeOne()) {
            // Extract two minimum length ropes from min
            // heap
            int min = minHeap.extractMin();
            int sec_min = minHeap.extractMin();
 
            cost += (min + sec_min); // Update total cost
 
            // Insert a new rope in min heap with length
            // equal to sum of two extracted minimum lengths
            minHeap.insertKey(min + sec_min);
        }
 
        // Finally return total minimum
        // cost for connecting all ropes
        return cost;
    }
 
    // Driver code
    public static void main(String args[])
    {
        int len[] = { 4, 3, 2, 6 };
        int size = len.length;
 
        System.out.println(
            "Total cost for connecting ropes is "
            + minCost(len, size));
    }
};
 
Output
Total cost for connecting ropes is 29
Time Complexity: O(N*log(N))
Auxiliary Space: O(N)

===========================================================================

Connect N ropes with minimum cost using Pre Defined Function
In this approach, we use the predefined priority queue which is already available. 
The approach and algorithm remain the same. The min heap is replaced by a priority queue.

Follow the steps mentioned below to implement the idea:

-> declare a priority queue and push all the elements in it.
-> Do following while the number of elements in min-heap is greater than one. 
-> Extract the minimum and second minimum from min-heap
-> Add the above two extracted values and insert the added value to the min-heap.
-> Maintain a variable for total cost and keep incrementing it by the sum of extracted values.
-> Return the value of total cost.


Below is the implementation of the above approach:


// Java program to connect n
// ropes with minimum cost
import java.util.*;
 
class ConnectRopes {
    static int minCost(int arr[], int n)
    {
        // Create a priority queue
        PriorityQueue<Integer> pq
            = new PriorityQueue<Integer>();
 
        // Adding items to the pQueue
        for (int i = 0; i < n; i++) {
            pq.add(arr[i]);
        }
 
        // Initialize result
        int res = 0;
 
        // While size of priority queue
        // is more than 1
        while (pq.size() > 1) {
            // Extract shortest two ropes from pq
            int first = pq.poll();
            int second = pq.poll();
 
            // Connect the ropes: update result
            // and insert the new rope to pq
            res += first + second;
            pq.add(first + second);
        }
 
        return res;
    }
 
    // Driver program to test above function
    public static void main(String args[])
    {
        int len[] = { 4, 3, 2, 6 };
        int size = len.length;
        System.out.println("Total cost for connecting"
                           + " ropes is "
                           + minCost(len, size));
    }
}
Output
Total cost for connecting ropes is 29
Time Complexity: O(N*log(N))
Auxiliary Space: O(N)
