Given an array Arr of N positive integers and an integer K, find K largest elements from the array.  
The output elements should be printed in decreasing order.

Example 1:

Input:
N = 5, K = 2
Arr[] = {12, 5, 787, 1, 23}
Output: 787 23
Explanation: 1st largest element in the
array is 787 and second largest is 23.
Example 2:

Input:
N = 7, K = 3
Arr[] = {1, 23, 12, 9, 30, 2, 50}
Output: 50 30 23
Explanation: 3 Largest element in the
array are 50, 30 and 23.
Your Task:
You don't need to read input or print anything. Your task is to complete the function kLargest() 
which takes the array of integers arr, n and k as parameters and returns an array of integers 
denoting the answer. The array should be in decreasing order.

Expected Time Complexity: O(N + KlogK)
Expected Auxiliary Space: O(K+(N-K)*logK)

Constraints:
1 ≤ K ≤ N ≤ 105
1 ≤ Arr[i] ≤ 106

MY_SOLUTION

class Solution {
    int[] kLargest(int[] arr, int n, int k) {
        // code here
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for(int i = 0; i < n; i++){
            minHeap.add(arr[i]);
            
            if(minHeap.size() > k){
              minHeap.remove();  
            }
        }
        
        int[] ans = new int[k];
        int j = 1;
        while(minHeap.size() > 0){
            ans[k - j] = minHeap.poll();
            j++;
        }
        return ans;
    }
}

================================================
class Solution {
   int[] kLargest(int[] a, int n, int k) {
       PriorityQueue<Integer>p=new PriorityQueue<>();
       for(int i=0;i<k;i++){
           p.add(a[i]);
       }
       for(int i=k;i<n;i++){
           int x=p.poll();
           if(x<a[i]){
               p.add(a[i]);
           }
           else{
               p.add(x);
           }
       }
       int res[]=new int[k];
       for(int i=k-1;i>=0 && !p.isEmpty();i--){
           res[i]=p.poll();
       }
       return res;
   }
}

=================================================

 int[] kLargest(int[] arr, int n, int k) {

        // code here

        int arr1[] = new int[k];

        Arrays.sort(arr);

        for(int i =0;i<k;i++){

            arr1[i] = arr[n-(i+1)];

        }

        return arr1;

    }
    
===============================================
  
Method 1 (Use Bubble k times) 
Thanks to Shailendra for suggesting this approach. 
1) Modify Bubble Sort to run the outer loop at most k times. 
2) Print the last k elements of the array obtained in step 1.

Time Complexity: O(n*k) 

Like Bubble sort, other sorting algorithms like Selection Sort can also be modified to get the k largest elements.


===============================================
 
Method 2 (Use temporary array) 
K largest elements from arr[0..n-1]

1) Store the first k elements in a temporary array temp[0..k-1]. 
2) Find the smallest element in temp[], let the smallest element be min. 
3-a) For each element x in arr[k] to arr[n-1]. O(n-k) 
     If x is greater than the min then remove min from temp[] and insert x. 
3-b)Then, determine the new min from temp[]. O(k) 
4) Print final k elements of temp[]

Time Complexity: O((n-k)*k). If we want the output sorted then O((n-k)*k + k*log(k))

    
===============================================
 
Method 3(Use Sorting) 
1) Sort the elements in descending order in O(n*log(n)) 
2) Print the first k numbers of the sorted array O(k). 

Following is the implementation of the above.  

// Java code for k largest elements in an array
import java.util.Arrays;
import java.util.Collections;
import java.util.ArrayList;
 
class GFG {
    public static void kLargest(Integer[] arr, int k)
    {
        // Sort the given array arr in reverse order
        // This method doesn't work with primitive data
        // types. So, instead of int, Integer type
        // array will be used
        Arrays.sort(arr, Collections.reverseOrder());
 
        // Print the first kth largest elements
        for (int i = 0; i < k; i++)
            System.out.print(arr[i] + " ");
    }
   
  public static ArrayList<Integer> kLargest(int[] arr, int k)
    {
        //Convert using stream
        Integer[] obj_array = Arrays.stream( arr ).boxed().toArray( Integer[] :: new);
        Arrays.sort(obj_array, Collections.reverseOrder());
        ArrayList<Integer> list = new ArrayList<>(k);
 
        for (int i = 0; i < k; i++)
            list.add(obj_array[i]);
     
        return list;
    }
 
    public static void main(String[] args)
    {
        Integer arr[] = new Integer[] { 1, 23, 12, 9,
                                        30, 2, 50 };
        int k = 3;
        kLargest(arr, k);
       
        //This code is contributed by Niraj Dubey
        //What if primitive datatype array is passed and wanted to return in ArrayList<Integer>
        int[] prim_array = { 1, 23, 12, 9, 30, 2, 50 };
          System.out.print(kLargest(prim_array, k));
    }
}
Output
50 30 23 
 
Time complexity: O(n*log(n))
Auxiliary Space: O(1)


===============================================
 
Method 4 (Use Max Heap) 
1) Build a Max Heap tree in O(n*log(n)) 
2) Use Extract Max k times to get k maximum elements from the Max Heap O(k*log(n))

Time complexity: O(n*log(n) + k*log(n)) 

Method 5(Use Order Statistics) 
1) Use an order statistic algorithm to find the kth largest element. 
  Please see the topic selection in worst-case linear time O(n) 
2) Use QuickSort Partition algorithm to partition around the kth largest number O(n). 
3) Sort the k-1 elements (elements greater than the kth largest element) O(k*log(k)). 
    This step is needed only if the sorted output is required.

Time complexity: O(n) if we don’t need the sorted output, otherwise O(n+k*log(k))

    
===============================================
 
Method 6 (Use Min Heap) 
This method is mainly an optimization of method 2. Instead of using temp[] array, use Min Heap.
1) Build a Min Heap MH of the first k elements (arr[0] to arr[k-1]) of the given array. O(k*log(k))
2) For each element, after the kth element (arr[k] to arr[n-1]), compare it with root of MH. 
……a) If the element is greater than the root then make it root and call heapify for MH 
……b) Else ignore it. 
// The step 2 is O((n-k)*log(k))
3) Finally, MH has k largest elements, and the root of the MH is the kth largest element.
Time Complexity: O(k*log(k) + (n-k)*log(k)) without sorted output.
If sorted output is needed then O(k*log(k) + (n-k)*log(k) + k*log(k)) so overall it is O(k*log(k) + (n-k)*log(k))

All of the above methods can also be used to find the kth largest (or smallest) element.

import java.io.*;
import java.util.*;
 
class GFG{
   
public static void FirstKelements(int arr[],
                                  int size,
                                  int k)
{
     
    // Creating Min Heap for given
    // array with only k elements
    // Create min heap with priority queue
    PriorityQueue<Integer> minHeap = new PriorityQueue<>();
    for(int i = 0; i < k; i++)
    {
        minHeap.add(arr[i]);
    }
     
    // Loop For each element in array
    // after the kth element
    for(int i = k; i < size; i++)
    {
         
        // If current element is smaller
        // than minimum ((top element of
        // the minHeap) element, do nothing
        // and continue to next element
        if (minHeap.peek() > arr[i])
            continue;
         
        // Otherwise Change minimum element
        // (top element of the minHeap) to
        // current element by polling out
        // the top element of the minHeap
        else
        {
            minHeap.poll();
            minHeap.add(arr[i]);
        }
    }
     
    // Now min heap contains k maximum
    // elements, Iterate and print
    Iterator iterator = minHeap.iterator();
     
    while (iterator.hasNext())
    {
        System.out.print(iterator.next() + " ");
    }
}
 
// Driver code
public static void main (String[] args)
{
    int arr[] = { 11, 3, 2, 1, 15, 5, 4,
                  45, 88, 96, 50, 45 };
     
    int size = arr.length;
     
    // Size of Min Heap
    int k = 3;
     
    FirstKelements(arr, size, k);
}
}

Output
50 88 96 
Time Complexity: O(nlogn)
Auxiliary Space: O(n)

    
===============================================
 
Method 7(Using Quick Sort partitioning algorithm):

Choose a pivot number.
if K is lesser than the pivot_Index then repeat the step.
if K == pivot_Index : Print the array (low to pivot to get K-smallest elements and (n-pivot_Index) 
to n for K-largest elements)
if  K > pivot_Index : Repeat the steps for right part.
We can improve on the standard quicksort algorithm by using the random() function. 
Instead of using the pivot element as the last element, we can randomly choose the pivot element.
The worst-case time complexity of this version is O(n2) and the average time complexity is O(n).

Following is the implementation of the above algorithm:

import java.util.*;
 
class GFG{
 
  //picks up last element between start and end
  static int findPivot(int a[], int start, int end)
  {
 
    // Selecting the pivot element
    int pivot = a[end];
 
    // Initially partition-index will be
    // at starting
    int pIndex = start;
 
    for (int i = start; i < end; i++) {
 
      // If an element is lesser than pivot, swap it.
      if (a[i] <= pivot) {
        int temp =a[i];
        a[i]= a[pIndex];
        a[pIndex]  = temp;
 
 
        // Incrementing pIndex for further
        // swapping.
        pIndex++;
      }
    }
 
    // Lastly swapping or the
    // correct position of pivot
    int temp = a[pIndex];
    a[pIndex] = a[end];
    a[end] = temp;
    return pIndex;
  }
 
 
  //Picks up random pivot element between start and end
  static int findRandomPivot(int arr[], int start, int end)
  {
    int n = end - start + 1;
    // Selecting the random pivot index
    int pivotInd = (int) ((Math.random()*1000000)%n);
    int temp = arr[end];
    arr[end] = arr[start+pivotInd];
    arr[start+pivotInd] = temp;
    int pivot = arr[end];
    //initialising pivoting point to start index
    pivotInd = start;
    for (int i = start; i < end; i++) {
 
      // If an element is lesser than pivot, swap it.
      if (arr[i] <= pivot) {
        int temp1 = arr[i];
        arr[i]= arr[pivotInd];
        arr[pivotInd] = temp1;
 
        // Incrementing pivotIndex for further
        // swapping.
        pivotInd++;
      }
    }
 
    // Lastly swapping or the
    // correct position of pivot
    int tep = arr[pivotInd];
    arr[pivotInd] =  arr[end];
    arr[end] = tep;
    return pivotInd;
  }
 
  static void SmallestLargest(int a[], int low, int high, int k,
                              int n)
  {
    if (low == high)
      return;
    else {
      int pivotIndex = findRandomPivot(a, low, high);
 
      if (k == pivotIndex) {
        System.out.print(k+ " smallest elements are : ");
        for (int i = 0; i < pivotIndex; i++)
          System.out.print(a[i]+ "  ");
 
        System.out.println();
 
        System.out.print(k+ " largest elements are : ");
        for (int i = (n - pivotIndex); i < n; i++)
          System.out.print(a[i]+ "  ");
      }
 
      else if (k < pivotIndex)
        SmallestLargest(a, low, pivotIndex - 1, k, n);
 
      else if (k > pivotIndex)
        SmallestLargest(a, pivotIndex + 1, high, k, n);
    }
  }
 
  // Driver Code
  public static void main(String[] args)
  {
    int a[] = { 11, 3, 2, 1, 15, 5, 4, 45, 88, 96, 50, 45 };
    int n = a.length;
 
    int low = 0;
    int high = n - 1;
 
    // Lets assume k is 3
    int k = 3;
 
    // Function Call
    SmallestLargest(a, low, high, k, n);
  }
}
 
Output
3 smallest elements are : 3  2  1  
3 largest elements are : 96  50  88  
Time Complexity: O(nlogn)
Auxiliary Space: O(1)

    
===============================================
 
Method 8(Using priority queue STL library):
In this approach, we can efficiently print the k largest/smallest elements of an array using a priority queue in O(n*log(k)) time complexity. 
First, we push k elements into the priority queue from the array. 
From there on, after every insertion of an array element, we will pop the element at the top of priority_queue.
In the case of the k largest element, the priority_queue will be in increasing order,and thus top most element will be the smallest so we are removing it.
Similarly, in the case of the k smallest element, the priority_queue is in decreasing order and hence the top most element is the largest one so we will remove it. 
In this fashion whole array is traversed and the priority queue of size k is printed which contains
k largest/smallest elements.

Below is the implementation of the above approach:

// Java code for k largest/ smallest elements in an array
import java.util.*;
 
class GFG {
 
    // Function to find k largest array element
    static void kLargest(int a[], int n, int k)
    {
        // Implementation using
        // a Priority Queue
        PriorityQueue<Integer> pq
            = new PriorityQueue<Integer>();
 
        for (int i = 0; i < n; ++i) {
 
            // Insert elements into
            // the priority queue
            pq.add(a[i]);
 
            // If size of the priority
            // queue exceeds k
            if (pq.size() > k) {
                pq.poll();
            }
        }
 
        // Print the k largest element
        while (!pq.isEmpty()) {
            System.out.print(pq.peek() + " ");
            pq.poll();
        }
        System.out.println();
    }
 
    // Function to find k smallest array element
    static void kSmallest(int a[], int n, int k)
    {
        // Implementation using
        // a Priority Queue
        PriorityQueue<Integer> pq
            = new PriorityQueue<Integer>(
                Collections.reverseOrder());
 
        for (int i = 0; i < n; ++i) {
 
            // Insert elements into
            // the priority queue
            pq.add(a[i]);
 
            // If size of the priority
            // queue exceeds k
            if (pq.size() > k) {
                pq.poll();
            }
        }
 
        // Print the k largest element
        while (!pq.isEmpty()) {
            System.out.print(pq.peek() + " ");
            pq.poll();
        }
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int a[]
            = { 11, 3, 2, 1, 15, 5, 4, 45, 88, 96, 50, 45 };
        int n = a.length;
        int k = 3;
        System.out.print(k + " largest elements are : ");
        // Function Call
        kLargest(a, n, k);
        System.out.print(k + " smallest elements are : ");
        // Function Call
        kSmallest(a, n, k);
    }
}
 
Output
3 largest elements are : 50 88 96 
3 smallest elements are : 3 2 1 
Time Complexity: O(n*log(k))
Auxiliary Space: O(k)
    
