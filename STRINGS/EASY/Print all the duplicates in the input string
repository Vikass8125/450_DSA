Write an efficient program to print all the duplicates and their counts in the input string 


MY_SOLUTION
import java.util.*;
/****
 * Following is the java Pair class
 * class Pair{
    char alphabet;
    int count;
    Pair(char ch, int x){
        this.alphabet = ch;
        this.count = x;
    }
}
 */


public class Solution {

    public static ArrayList<Pair> duplicate_char(String s, int n) {
        
        ArrayList<Pair> res = new ArrayList<>();
        
        Map<Character, Integer> map = new LinkedHashMap<>();
        
        for(int i = 0; i < n; i++){
            char ch = s.charAt(i);
            map.put(ch,map.getOrDefault(ch, 0) + 1);
        }
        
        for(Map.Entry<Character, Integer> mapEle : map.entrySet()){
            char key = mapEle.getKey();
            int val = mapEle.getValue();
            
            if(val > 1) res.add(new Pair(key, val));
        }
        
        return res;
         
    }
}
====================================================================================================================================================
/*
    Time Complexity: O(N)
    Space Complexity: O(K)

    where N is the length of the string and K is the number of characters.
*/

import java.util.*;

public class Solution {

    public static ArrayList<Pair> duplicate_char(String s, int n) {
        
        // Find the duplicate characters in a string.
    
        int k = 255;

        int[] freq = new int[k];
        for (int i = 0; i < s.length(); i++){
            freq[s.charAt(i)] += 1;
        }

        ArrayList<Pair> ans = new ArrayList<>();
        
        for (int i = 0; i < k; i++){
            if (freq[i] > 1){
                ans.add(new Pair((char)i, freq[i]));
            }
        }
        return ans;
    }
}
====================================================================================================================================

Method 1: Using hashing

Algorithm: Let input string be “geeksforgeeks” 

Construct character count array from the input string.
count[‘e’] = 4 
count[‘g’] = 2
count[‘k’] = 2 
……
Print all the indexes from the constructed array which have values greater than 1.
Implementation:


// Java program to count all
// duplicates from string using
// hashing
 
public class GFG {
    static final int NO_OF_CHARS = 256;
 
    /* Fills count array with
       frequency of characters */
    static void fillCharCounts(String str,
                                   int[] count)
    {
        for (int i = 0; i < str.length(); i++)
            count[str.charAt(i)]++;
    }
 
    /* Print duplicates present
      in the passed string */
    static void printDups(String str)
    {
        // Create an array of size
        // 256 and fill count of
        // every character in it
        int count[] = new int[NO_OF_CHARS];
        fillCharCounts(str, count);
 
        for (int i = 0; i < NO_OF_CHARS; i++)
            if (count[i] > 1)
                System.out.println((char)(i) +
                          ", count = " + count[i]);
    }
 
    // Driver Method
    public static void main(String[] args)
    {
        String str = "test string";
        printDups(str);
    }
}
Output
s, count = 2 
t, count = 3 
Time Complexity: O(n), where n = length of the string passed
Space Complexity: O(NO_OF_CHARS)

Note: Hashing involves the use of an array of fixed size each time no matter whatever the string is. 

For example, str = “aaaaaaaaaa”. 

An array of size 256 is used for str, only 1 block out of total size (256) will be utilized to store the number of occurrences of ‘a’ in str (i.e count[‘a’] = 10). 

Rest 256 – 1 = 255 blocks remain unused. 

Thus, Space Complexity is potentially high for such cases. 
So, to avoid any discrepancies and to improve Space Complexity, maps are generally preferred over long-sized arrays. 

Method 2: Using Maps

Approach: The approach is the same as discussed in Method 1, but, using a map to store the count.

Implementation:


// Java program to count all duplicates
// from string using maps
import java.util.*;
 
class GFG {
 
    static void printDups(String str)
    {
        HashMap<Character, Integer> count = new HashMap<>();
        /*Store duplicates present
        in the passed string */
        for (int i = 0; i < str.length(); i++) {
            if (!count.containsKey(str.charAt(i)))
                count.put(str.charAt(i), 1);
            else
                count.put(str.charAt(i),
                          count.get(str.charAt(i)) + 1);
        }
 
        /*Print duplicates in sorted order*/
        for (Map.Entry mapElement : count.entrySet()) {
            char key = (char)mapElement.getKey();
            int value = ((int)mapElement.getValue());
 
            if (value > 1)
                System.out.println(key
                                   + ", count = " + value);
        }
    }
    // Driver code
    public static void main(String[] args)
    {
        String str = "test string";
        printDups(str);
    }
}
// This code is contributed by yashbeersingh42
Output
s, count = 2
t, count = 3
Time Complexity: O(N*log(N)), where N = length of the string passed and it generally takes O(log(N)) time for an element insertion in a map. 
Space Complexity: O(K), where K = size of the map (0<=K<=input_string_length).

Implementation:


/*package whatever //do not write package name here */
import java.io.*;
import java.util.*;
 
class GFG
{
   
  // Java program to count all duplicates
  // from string using maps
  static void printDups(String str)
  {
    Map<Character, Integer> count = new HashMap<>();
    for (int i = 0; i < str.length(); i++) {
      if(count.containsKey(str.charAt(i)))
        count.put(str.charAt(i) , count.get(str.charAt(i))+1);
      else count.put(str.charAt(i),1);
      //increase the count of characters by 1
    }
 
    for (Map.Entry<Character,Integer> mapElement : count.entrySet()) {   //iterating through the unordered map
      if (mapElement.getValue() > 1)   //if the count of characters is greater then 1 then duplicate found
        System.out.println(mapElement.getKey() + ", count = " + mapElement.getValue());
    }
  }
 
  /* Driver program to test above function*/
  public static void main(String args[])
  {
    String str = "test string";
    printDups(str);
  }
}
 
// This code is contributed by shinjanpatra
Output
s, count = 2
t, count = 3
Time Complexity: O(N), where N = length of the string passed and it takes O(1) time to insert and access any element in an unordered map
Auxiliary Space: O(K), where K = size of the map (0<=K<=input_string_length).
