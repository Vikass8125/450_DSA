Given a binary string, that is it contains only 0s and 1s. We need to make this string a sequence of alternate characters by flipping some of the bits, our goal is to minimize the number of bits to be flipped.

Example 1:

Input:
S = "001"
Output: 1
Explanation: 
We can flip the 0th bit to 1 to have
101.


Example 2:

Input:
S = "0001010111" 
Output: 2
Explanation: We can flip the 1st and 8th bit 
bit to have "0101010101"
101.

Your Task:
You don't need to read input or print anything. Your task is to complete the function minFlips() which takes the string S as input and 
returns the minimum number of flips required.


Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(1).


Constraints:
1<=|S|<=105

MY_SOLUTION


class Solution {
    public int minFlips(String S) {
        // Code here
        int len = S.length();
        int flips = 0;
        for(int i = 0; i < len; i++){
            if(i%2 == 0){
                if(S.charAt(i) == '0') flips++;
            }
            else if(i%2 != 0){
                if(S.charAt(i) == '1') flips++;
            }
        }
        return (Math.min(flips, len - flips));
    }
}

=========================================================================


CPP SOLUTION


step1 : zero="010101010"

one="101010101010"

 according to the given string size.

 

step2 : Now we check both string with the given string that is how many elements of the given string are different
with correspond to the both string and two counter increases respectively(as per condition)

 

step3 : return min from the both counter.

int minFlips (string S)
{
      string zero="",one="";
      bool flag = 1;
  for(int i=0;i<S.size();i++){
  if(flag)
  {
      zero+='0';
      one+='1';
      flag=0;
  }
  else {
      zero+='1';
      one+='0';
      flag=1;
  }
  }
   int c0=0,c1=0;
    for(int i=0;i<S.size();i++){
        if(S[i]!=zero[i]) c0++;
        if(S[i]!=one[i]) c1++;
    }
    return min(c0,c1);
   
}

================================================

We can solve this problem by considering all possible results, As we are supposed to get alternate string, there are only 2 possibilities, 
alternate string starting with 0 and alternate string starting with 1. 
We will try both cases and choose the string which will require minimum number of flips as our final answer. 

Trying a case requires O(n) time in which we will loop over all characters of given string, 
if current character is expected character according to alternation then we will do nothing otherwise we will increase flip count by 1.
After trying strings starting with 0 and starting with 1, we will choose the string with minimum flip count. 

Total time complexity of solution will be O(n) 

Implementation:


// Java program to find minimum number of
// flip to make binary string alternate
class GFG
{
    //  Utility method to flip a character
    public static char flip(char ch)
    {
        return (ch == '0') ? '1' : '0';
    }
      
    //  Utility method to get minimum flips when
    //  alternate string starts with expected char
    public static int getFlipWithStartingCharcter(String str,
                                    char expected)
    {
        int flipCount = 0;
        for (int i = 0; i < str.length(); i++)
        {
            //  if current character is not expected,
            // increase flip count
            if (str.charAt(i) != expected)
                flipCount++;
      
            //  flip expected character each time
            expected = flip(expected);
        }
        return flipCount;
    }
      
    // method return minimum flip to make binary
    // string alternate
    public static int minFlipToMakeStringAlternate(String str)
    {
        //  return minimum of following two
        //  1) flips when alternate string starts with 0
        //  2) flips when alternate string starts with 1
        return Math.min(getFlipWithStartingCharcter(str, '0'),
                   getFlipWithStartingCharcter(str, '1'));
    }
      
    //  Driver code to test above method
    public static void main(String args[])
    {
        String str = "0001010111";
        System.out.println(minFlipToMakeStringAlternate(str));
    }
}
 
// This code is contributed by Sumit Ghosh
Output
2
Time Complexity: O(N)
Auxiliary Space: O(1) 


