Given binary string str of length N. The task is to find the maximum count of consecutive substrings str can be divided into such that all
the substrings are balanced i.e. they have an equal number of 0s and 1s. If it is not possible to split str satisfying the conditions then return -1.

Example 1:

Input:
S = "0100110101"
Output: 4
Explanation: 
The required substrings are 01, 0011, 01 and 01.

Example 2:

Input:
S = "0111100010"
Output: 3
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function maxSubStr() which takes a string S and returns an integer as output.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 <= S.length <= 105


MY_SOLUTION

class Solution {
    public static int maxSubStr(String str) {
       //Write your code here
       int len = str.length();
       
       int count_0 = 0;
       int count_1 = 0;
       int res = 0;
      
       
       for(int i = 0; i < len; i++){
           if(str.charAt(i) == '0') count_0++;
           else count_1++;
           
           if((count_1 - count_0) == 0){
               count_0 = 0;
               count_1 = 0;
               res++;
           }
    
       }
       
       
       return (count_0 > 0 || count_1 > 0) ? -1 : res;
    }
}

======================================
class Solution {
    public static int maxSubStr(String str) {
        int count0 = 0, count1 = 0;
        int cnt = 0;
        for(int i = 0; i < str.length(); i++) {
            if(str.charAt(i) == '0') {
                count0++;
            }
            else {
                count1++;
            }
            if(count0 == count1) {
                cnt++;
                count0 = count1 = 0; //not mandatory- makes easier during dry run
            }
        }
        //if we reach to the end and still both r not same
        if(count0 != count1) {
            return -1;
        }
        return cnt;
    }
}


=========================================

Given a binary string str of length N, the task is to find the maximum count of consecutive substrings str can be divided into such that all the substrings are balanced i.e. they have equal number of 0s and 1s. If it is not possible to split str satisfying the conditions then print -1.
Example: 
 

Input: str = "0100110101" 
Output: 4 
The required substrings are "01", "0011", "01" and "01".
Input: str = "0111100010" 
Output: 3 

Input: str = "0000000000" 

Output: -1
 



Approach: 
Initialize count = 0 and traverse the string character by character and keep track of the number of 0s and 1s so far, 
whenever the count of 0s and 1s become equal increment the count. 
As in the given question, if it is not possible to split string then on that time count of 0s must not be equal to count of 1s then return -1 
else print the value of count after the traversal of the complete string.
Below is the implementation of the above approach:
 


// Java implementation of the above approach
class GFG
{

// Function to return the count
// of maximum substrings str
// can be divided into
static int maxSubStr(String str, int n)
{

    // To store the count of 0s and 1s
    int count0 = 0, count1 = 0;

    // To store the count of maximum
    // substrings str can be divided into
    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
        if (str.charAt(i) == '0') 
        {
            count0++;
        }
        else 
        {
            count1++;
        }
        if (count0 == count1) 
        {
            cnt++;
        }
    }

    // It is not possible to
    // split the string
    if (count0 != count1) 
    {
        return -1;
    }
    return cnt;
}

// Driver code
public static void main(String []args) 
{
    String str = "0100110101";
    int n = str.length();

    System.out.println(maxSubStr(str, n));
}
}

// This code is contributed by PrinciRaj1992

Output: 
4

 
Time complexity: O(N) where N is the length of string 
Space Complexity: O(1)

