Given an array Arr of N positive integers. Your task is to find the elements whose value is equal to that of its index value ( Consider 1-based indexing ).

Example 1:

Input: 
N = 5
Arr[] = {15, 2, 45, 12, 7}
Output: 2
Explanation: Only Arr[2] = 2 exists here.
Example 2:

Input: 
N = 1
Arr[] = {1}
Output: 1
Explanation: Here Arr[1] = 1 exists.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function valueEqualToIndex() which takes the array of integers arr[] and n as parameters 
and returns an array of indices where the given conditions are satified. When there is not such element exists then return an empty array of length 0.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
Note: There can be more than one element in the array which have same value as their index. You need to include every such element's index. 
Follows 1-based indexing of the array.

Constraints:
1 ≤ N ≤ 105
1 ≤ Arr[i] ≤ 106


MY_SOLUTION

class Solution {
    ArrayList<Integer> valueEqualToIndex(int arr[], int n) {
        // code here
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < n; i++){
            if(arr[i] == i + 1){
                list.add(arr[i]);
            }
        }
        return list;
    }
}

===============================
Algorithm:
1. Create an auxiliary vector res, which stores all the elements
2. The idea is to traverse the array linearly and for each index i,
   we need to check whether arr[i] = i + 1. 
3. If the above condition is true, push the elements into the vector.
4. At the end, return the resultant vector.
Implementation:
#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
    vector<int> valueEqualToIndex(int arr[], int n) {
        vector<int> v;
        for (int i = 0; i < n; i++) {
            if (arr[i] == i + 1) {
                v.push_back(i + 1);
            }
        }
        return v;
    }
};

int main() {
        int n = 5;
        int arr[] = {15, 2, 45, 12, 7};
        Solution ob;
        auto ans = ob.valueEqualToIndex(arr, n);
        if (ans.empty()) {
            cout << "Not Found";
        } else {
            for (int x: ans) {
                cout << x << " ";
            }
        }
        cout << "\n";
    }
    return 0;
}

 

          Output: 

2
Complexity Analysis:

Time complexity: O(N). 
One linear traversal, so time complexity is O(N).
Space Complexity: O(1). 
As no extra space is required(we are not considering the auxiliary vector).


============================================================
Method 1 (Linear Search) 
Linearly search for an index i such that arr[i] == i. Return the first such index found. 


// Java program to check fixed point
// in an array using linear search
 
class Main {
    static int linearSearch(int arr[], int n)
    {
        int i;
        for (i = 0; i < n; i++) {
            if (arr[i] == i)
                return i;
        }
 
        /* If no fixed point present
           then return -1 */
        return -1;
    }
    // main function
    public static void main(String args[])
    {
        int arr[] = { -10, -1, 0, 3, 10, 11, 30, 50, 100 };
        int n = arr.length;
        System.out.println("Fixed Point is "
                           + linearSearch(arr, n));
    }
}
Output:  

Fixed Point is 3
Time Complexity: O(n) 
Auxiliary Space: O(1) 

Method 2 (Binary Search) 
First check whether middle element is Fixed Point or not.
If it is, then return it; otherwise if the index of middle + 1 element is less than or equal to the value at the high index, then Fixed Point(s)
might lie on the right side of the middle point (obviously only if there is a Fixed Point). 
Similarly, check if the index of middle – 1 element is greater than or equal to the value at the low index, then Fixed Point(s) might lie on the
left side of the middle point. 
 


// Java program to check fixed point
// in an array using binary search
 
class Main {
 
    static int binarySearch(int arr[], int low, int high)
    {
        if (high >= low) {
            int mid = low + (high - low) / 2;
            if (mid == arr[mid])
                return mid;
            int res = -1;
            if (mid + 1 <= arr[high])
                res = binarySearch(arr, (mid + 1), high);
            if (res != -1)
                return res;
            if (mid - 1 >= arr[low])
                return binarySearch(arr, low, (mid - 1));
        }
 
        /* Return -1 if there is no Fixed Point */
        return -1;
    }
 
    // main function
    public static void main(String args[])
    {
        int arr[] = { -10, -1, 0, 3, 10, 11, 30, 50, 100 };
        int n = arr.length;
        System.out.println("Fixed Point is "
                           + binarySearch(arr, 0, n - 1));
    }
}
Output: 
 

Fixed Point is 3
Algorithmic Paradigm: Divide & Conquer 

Time Complexity: O(log n)

Auxiliary Space: O(log n) (As implicit stack is used for recursive calls)
 
