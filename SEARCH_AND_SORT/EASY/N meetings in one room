There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) 
where start[i] is start time of meeting i and end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when 
only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.


Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)
Example 2:

Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held
with given start and end timings.

Your Task :
You don't need to read inputs or print anything. Complete the function maxMeetings() that takes two arrays start[] and end[] along with their size N as 
input parameters and returns the maximum number of meetings that can be held in the meeting room.


Expected Time Complexity : O(N*LogN)
Expected Auxilliary Space : O(N)


Constraints:
1 ≤ N ≤ 105
0 ≤ start[i] < end[i] ≤ 105


===============================

There is one meeting room in a firm. There are N meetings in the form of (S[i], F[i]) where S[i] is the start time of meeting i and F[i] is the finish time 
of meeting i. The task is to find the maximum number of meetings that can be accommodated in the meeting room. Print all meeting numbers

Examples: 

Input: s[] = {1, 3, 0, 5, 8, 5}, f[] = {2, 4, 6, 7, 9, 9} 
Output: 1 2 4 5
First meeting [1, 2] 
Second meeting [3, 4] 
Fourth meeting [5, 7] 
Fifth meeting [8, 9]

Input : s[] = {75250, 50074, 43659, 8931, 11273, 27545, 50879, 77924}, 
f[] = {112960, 114515, 81825, 93424, 54316, 35533, 73383, 160252 } 
Output : 6 7 1

Greedy approach for maximum meetings in one room:

The idea is to solve the problem using the greedy approach which is the same as Activity Selection Problem i.e sort the meetings by their finish time and then 
start selecting meetings, starting with the one with least end time and then select other meetings such that the start time of the current meeting is greater
than the end time of last meeting selected

Follow the given steps to solve the problem using the above approach:

Sort all pairs(Meetings) in increasing order of each pair's second number(Finish time).
Select the first meeting of the sorted pair as the first Meeting in the room and push it into the result vector and set a variable time_limit(say)
with the second value(Finishing time) of the first selected meeting.
Iterate from the second pair to the last pair of the array and if the value of the first element(Starting time of meeting) of the current pair is 
greater than the previously selected pair's finish time (time_limit) then select the current pair and update the 
result vector (push selected meeting number into result vector) and variable time_limit.
Print the Order of meeting from the result vector.
Below is the implementation of the above approach.

// Java program to find maximum number of meetings
import java.util.*;

// Comparator function which can compare
// the ending time of the meeting ans
// sort the list
class mycomparator implements Comparator<meeting> {
    @Override public int compare(meeting o1, meeting o2)
    {
        if (o1.end < o2.end) {

            // Return -1 if second object is
            // bigger then first
            return -1;
        }
        else if (o1.end > o2.end)

            // Return 1 if second object is
            // smaller then first
            return 1;

        return 0;
    }
}

// Custom class for storing starting time,
// finishing time and position of meeting.
class meeting {
    int start;
    int end;
    int pos;

    meeting(int start, int end, int pos)
    {
        this.start = start;
        this.end = end;
        this.pos = pos;
    }
}

class GFG {

    // Function for finding maximum meeting in one room
    public static void maxMeeting(ArrayList<meeting> al,
                                  int s)
    {

        // Initialising an arraylist for storing answer
        ArrayList<Integer> m = new ArrayList<>();

        int time_limit = 0;

        mycomparator mc = new mycomparator();

        // Sorting of meeting according to
        // their finish time.
        Collections.sort(al, mc);

        // Initially select first meeting.
        m.add(al.get(0).pos);

        // time_limit to check whether new
        // meeting can be conducted or not.
        time_limit = al.get(0).end;

        // Check for all meeting whether it
        // can be selected or not.
        for (int i = 1; i < al.size(); i++) {
            if (al.get(i).start > time_limit) {

                // Add selected meeting to arraylist
                m.add(al.get(i).pos);

                // Update time limit
                time_limit = al.get(i).end;
            }
        }

        // Print final selected meetings.
        for (int i = 0; i < m.size(); i++)
            System.out.print(m.get(i) + 1 + " ");
    }

    // Driver's Code
    public static void main(String[] args)
    {

        // Starting time
        int s[] = { 1, 3, 0, 5, 8, 5 };

        // Finish time
        int f[] = { 2, 4, 6, 7, 9, 9 };

        // Defining an arraylist of meet type
        ArrayList<meeting> meet = new ArrayList<>();
        for (int i = 0; i < s.length; i++)

            // Creating object of meeting
            // and adding in the list
            meet.add(new meeting(s[i], f[i], i));

        // Function call
        maxMeeting(meet, meet.size());
    }
}

// This code is contributed by Sarthak Sethi
Output: 

1 2 4 5
Time Complexity: O(N log N) 
Auxiliary Space: O(N) for creating a vector of pairs that is approximately equal to O(N)

=============================================================================================

//{ Driver Code Starts
import java.io.*;
import java.util.*;
import java.lang.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());

        while (t-- > 0) {
            String inputLine[] = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);

            int start[] = new int[n];
            int end[] = new int[n];

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++)
                start[i] = Integer.parseInt(inputLine[i]);

            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) 
                end[i] = Integer.parseInt(inputLine[i]);
                
            int ans = new Solution().maxMeetings(start, end, n);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends

class meetings{
    int start;
    int end;
    int pos;
    meetings(int start,int end,int pos){
        this.start=start;
        this.end=end;
        this.pos=pos;
    }
}

class meetingComparator implements Comparator<meetings>{
    @Override
    public int compare(meetings o1,meetings o2){
        if(o1.end<o2.end)
            return -1;
        else if(o1.end>o2.end)
            return 1;
        else if(o1.pos<o2.pos)
            return -1;
        else
            return 1;
    }
}

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        ArrayList<meetings> arr= new ArrayList<meetings>();
        for(int i=0;i<n;i++){
            arr.add(new meetings(start[i],end[i],i+1));
        }
        meetingComparator mc = new meetingComparator();
        Collections.sort(arr,mc);
        ArrayList<Integer> answer = new ArrayList<Integer>();
        answer.add(arr.get(0).pos);
        int limit = arr.get(0).end;
        
        for(int i=1;i<start.length;i++){
            if(arr.get(i).start>limit){
                limit=arr.get(i).end;
                answer.add(arr.get(i).pos);
            }
        }
        return answer.size();
    }
}
