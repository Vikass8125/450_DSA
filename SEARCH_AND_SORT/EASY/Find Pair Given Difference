Given an array Arr[] of size L and a number N, you need to write a program to find if there exists a pair of elements in the array whose difference is N.

Example 1:

Input:
L = 6, N = 78
arr[] = {5, 20, 3, 2, 5, 80}
Output: 1
Explanation: (2, 80) have difference of 78.
Example 2:

Input:
L = 5, N = 45
arr[] = {90, 70, 20, 80, 50}
Output: -1
Explanation: There is no pair with difference of 45.
Your Task:
You need not take input or print anything.
Your task is to complete the function findPair() which takes array arr, size of the array L and N as input parameters and returns True if required pair exists,
else return False.

Expected Time Complexity: O(L* Log(L)).
Expected Auxiliary Space: O(1).

Constraints:
1<=L<=104 
1<=Arr[i]<=105 

0<=N<=105

MY_SOLUTION

Method 1 : Checking the difference of every possible pair of elements.
Let inputArray be an integer array of size N and we want to find a pairs having difference of K.
-> In this method, we will check the difference of every pair of elements in array.
-> Outer loop will fix one element(let it be X) and inner for loop will check X's difference with every other element. 
-> If the difference is equal to K then print current pair.
Time Complexity : O(n2)


Method 2 : By Sorting Input Array
Let inputArray be an integer array of size N and we want to find a pairs having difference of K.
-> Sort inputArray.
-> Initialize two variables i and j to the index of first and second element of inputArray.
-> If inputArray[j] - inputArray[i] == K, then print inputArray[i] and inputArray[j].
-> If inputArray[j] - inputArray[i] < K, then we need to increase the difference between elements. Hence, increment j.
-> If inputArray[j] - inputArray[i] > K, then we need to reduce the difference between two elements. Hence, increment i.
Time Complexity : O(nLogn)



bool findPair(int arr[], int size, int n)
{
    sort(arr,arr+size);
    int i = 0;  
    int j = 1;
 
    while (i<size && j<size)
    {
        if (i != j && arr[j]-arr[i] == n)
        {
            return true;
        }
        else if (arr[j]-arr[i] < n)
            j++;
        else
            i++;
    }
 
    return false;
}
==========================================================
class Solution

{

    public boolean findPair(int arr[], int size, int n)

    {

        //code here.

        Arrays.sort(arr);

        for(int i=0; i<size; i++)

        {

            int curr=arr[i];

            int find = curr+n;

            

            int low =0, high =size-1;

            while(low<=high)

            {

                int mid = (high+low)/2;

                if(arr[mid]==find && mid != i) 

                    return true;

                    

                else if(find > arr[mid])

                {

                    low = mid + 1; 

                }

                else 

                    high = mid-1;

            }

        }

        return false;

        

    }

}

====================================================================
bool BinarySearch(int arr[] , int low , int high , int key){

    while(low <= high){
        int mid = (low + (high - low) / 2);
        
        if(arr[mid] == key)
            return true;
            
        else if(arr[mid] < key)
            low = mid + 1;
        
        else
            high = mid - 1;
    }
    
    return false;
}

bool findPair(int arr[], int size, int n){
    //code
    int N = size;
    int num = n;
    
    sort(arr , arr + N);
    for(int i = 0 ; i < N - 1 ; ++i){
        int searchEle = arr[i] + num;
        
        if(BinarySearch(arr , i + 1 , N , searchEle)) return true;
    
    }
    return false;
}

================================================
HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
       Arrays.sort(arr);
       for(int i=0; i<size; i++)
       {
           if(arr[i]>n)
           {
               int temp = arr[i]-n;
               if(hm.containsKey(temp))
               return true;
           }
           hm.put(arr[i],1);
       }
       return false;
================================================

Method 1: The simplest method is to run two loops, the outer loop picks the first element (smaller element) 
          and the inner loop looks for the element picked by outer loop plus n. Time complexity of this method is O(n2).

Method 2: We can use sorting and Binary Search to improve time complexity to O(nLogn).
          The first step is to sort the array in ascending order. 
          Once the array is sorted, traverse the array from left to right, and for each element arr[i], binary search for arr[i] + n in arr[i+1..n-1].
          If the element is found, return the pair. Both first and second steps take O(nLogn). So overall complexity is O(nLogn). 
Method 3: The second step of the Method -2 can be improved to O(n). The first step remains the same. 
          The idea for the second step is to take two index variables i and j, and initialize them as 0 and 1 respectively.
          Now run a linear loop. If arr[j] – arr[i] is smaller than n, we need to look for greater arr[j], so increment j.
          If arr[j] – arr[i] is greater than n, we need to look for greater arr[i], so increment i. 
          
The following code is only for the second step of the algorithm, it assumes that the array is already sorted.  


// Java program to find a pair with the given difference
import java.io.*;
 
class PairDifference
{
    // The function assumes that the array is sorted
    static boolean findPair(int arr[],int n)
    {
        int size = arr.length;
 
        // Initialize positions of two elements
        int i = 0, j = 1;
 
        // Search for a pair
        while (i < size && j < size)
        {
            if (i != j && (arr[j] - arr[i] == n || arr[i] - arr[j] == n))
            {
                System.out.print("Pair Found: "+
                                 "( "+arr[i]+", "+ arr[j]+" )");
                return true;
            }
            else if (arr[j] - arr[i] < n)
                j++;
            else
                i++;
        }
 
        System.out.print("No such pair");
        return false;
    }
 
    // Driver program to test above function
    public static void main (String[] args)
    {
        int arr[] = {1, 8, 30, 40, 100};
        int n = -60;
        findPair(arr,n);
    }
}

Output
Pair Found: (100, 40)
Time Complexity: O(n*log(n)) [Sorting is still required as first step], Where n is number of element in given array
Auxiliary Space: O(1)




The above code can be simplified and can be made more understandable by reducing bunch of If-Else checks . 

// C++ program to find a pair with the given difference
#include <bits/stdc++.h>
using namespace std;
bool findPair(int arr[], int size, int n)
{
    // Step-1 Sort the array
    sort(arr, arr + size);
 
    // Initialize positions of two elements
    int l = 0;
    int r = 1;
 
    // take absolute value of difference
    // this does not affect the pair as A-B=diff is same as
    // B-A= -diff
    n = abs(n);
 
    // Search for a pair
 
    // These roop running conditions are sufficient
    while (l <= r and r < size) {
        int diff = arr[r] - arr[l];
        if (diff == n
            and l != r) // we need distinct elements in pair
                        // so l!=r
        {
            cout << "Pair Found: (" << arr[l] << ", "
                 << arr[r] << ")";
            return true;
        }
        else if (diff > n) // try to reduce the diff
            l++;
        else // Note if l==r then r will be advanced thus no
             // pair will be missed
            r++;
    }
    cout << "No such pair";
    return false;
}
 
// Driver program to test above function
int main()
{
    int arr[] = { 1, 8, 30, 40, 100 };
    int size = sizeof(arr) / sizeof(arr[0]);
    int n = -60;
    findPair(arr, size, n);
    cout << endl;
    n = 20;
    findPair(arr, size, n);
    return 0;
}
 

Output
Pair Found: (40, 100)
No such pair
Time Complexity: O(n*log(n)) [Sorting is still required as first step], Where n is number of element in given array
Auxiliary Space: O(1)



Method 4 :Hashing can also be used to solve this problem. Create an empty hash table HT. 
          Traverse the array, use array elements as hash keys and enter them in HT. 
          Traverse the array again look for value n + arr[i] in HT. 


// Java program for the above approach
import java.io.*;
import java.util.*;
 
class GFG
{
 
  // The function assumes that the array is sorted
  static boolean findPair(int[] arr, int size, int n)
  {
    HashMap<Integer,
            Integer> mpp = new HashMap<Integer,
                                      Integer>();
 
     // Traverse the array
    for(int i = 0; i < size; i++)
    {
          
        // Update frequency
        // of arr[i]
        mpp.put(arr[i],
               mpp.getOrDefault(arr[i], 0) + 1);
       
        // Check if any element whose frequency
        // is greater than 1 exist or not for n == 0
        if (n == 0 && mpp.get(arr[i]) > 1)
            return true;
    }
  
     // Check if difference is zero and
    // we are unable to find any duplicate or
    // element whose frequency is greater than 1
    // then no such pair found.
    if (n == 0)
        return false;
 
    for (int i = 0; i < size; i++) {
      if (mpp.containsKey(n + arr[i])) {
        System.out.print("Pair Found: (" + arr[i] + ", " +
                      + (n + arr[i]) + ")");
        return true;
      }
    }
    System.out.print("No Pair found");
    return false;
  }
 
 
// Driver Code
public static void main(String[] args)
{
    int[] arr = { 1, 8, 30, 40, 100 };
    int size = arr.length;
    int n = -60;
    findPair(arr, size, n);
}
}
 

Output
Pair Found: (100, 40)
Time Complexity: O(n), Where n is number of element in given array
Auxiliary Space: O(n)
 
