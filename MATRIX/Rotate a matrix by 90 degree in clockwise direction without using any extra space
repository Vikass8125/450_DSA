Given a square matrix, turn it by 90 degrees in a clockwise direction without using any extra space.

Examples: 

Input:
1 2 3 
4 5 6
7 8 9  
Output:
7 4 1 
8 5 2
9 6 3

Input:
1 2
3 4
Output:
3 1
4 2 


MY_SOLUTION

class Solution {
    public void rotate(int[][] matrix) {
       /* int len = matrix.length;
        
        // Transposing the Matrix
        for(int i = 0; i < len; i++){
            for(int j = i; j < len; j++){
                // Swap matrix[i][j] with matrix[j][i]
                //-> swap along the diagonal
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        // Reverse Each Row
        for(int i = 0; i < len; i++){
            for(int j = 0; j < len/2; j++){
                // Swap matrix[i][j] with matrix[i][len-j-1]
                //-> swap along the diagonal
                int temp = matrix[i][j];
                matrix[i][j] =matrix[i][len-j-1];
               matrix[i][len-j-1] = temp;
            }
        }*/
        
        int len = matrix.length;
        int layers = len/2;
        
        for(int layer = 0; layer < layers; layer++){
            int start = layer;
            int end = len - 1 - layer;
            
            for(int i = start; i < end; i++){
                // top in temp
                int temp = matrix[start][i];
                // left in top
                matrix[start][i] = matrix[len-1-i][start];
                // bottom in left
                matrix[len-1-i][start] = matrix[end][len-1-i];
                //rght in bottom
                matrix[end][len-1-i] = matrix[i][end];
                //top in right
                matrix[i][end] = temp;
            }
        }
        
        
    }
}

========================================================================================================================

Method 1

Approach: 
The approach is similar to Inplace rotate square matrix by 90 degrees | Set 1.
=======================
[

Given a square matrix, turn it by 90 degrees in anti-clockwise direction without using any extra space.

Examples : 

Input:
Matrix:
 1  2  3
 4  5  6
 7  8  9
Output:
 3  6  9 
 2  5  8 
 1  4  7 
The given matrix is rotated by 90 degree 
in anti-clockwise direction.

Input:
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14 15 16 
Output:
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13
The given matrix is rotated by 90 degree 
in anti-clockwise direction.


An approach that requires extra space is already discussed here.

Approach: To solve the question without any extra space, rotate the array in form of squares, dividing the matrix into squares or cycles. For example, 
A 4 X 4 matrix will have 2 cycles. The first cycle is formed by its 1st row, last column, last row and 1st column. The second cycle is formed by 2nd row, second-last column, second-last row and 2nd column. The idea is for each square cycle, swap the elements involved with the corresponding cell in the matrix in anti-clockwise direction i.e. from top to left, left to bottom, bottom to right and from right to top one at a time using nothing but a temporary variable to achieve this.

Demonstration: 

First Cycle (Involves Red Elements)
 1  2  3 4 
 5  6  7 8 
 9 10 11 12 
 13 14 15 16 

Moving first group of four elements (First
elements of 1st row, last row, 1st column 
and last column) of first cycle in counter
clockwise. 
 4  2  3 16
 5  6  7 8 
 9 10 11 12 
 1 14  15 13 
 
Moving next group of four elements of 
first cycle in counter clockwise 
 4  8  3 16 
 5  6  7  15  
 2  10 11 12 
 1  14  9 13 

Moving final group of four elements of 
first cycle in counter clockwise 
 4  8 12 16 
 3  6  7 15 
 2 10 11 14 
 1  5  9 13 


Second Cycle (Involves Blue Elements)
 4  8 12 16 
 3  6 7  15 
 2  10 11 14 
 1  5  9 13 

Fixing second cycle
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13
Algorithm: 

There is N/2 squares or cycles in a matrix of side N. Process a square one at a time. Run a loop to traverse the matrix a cycle at a time, i.e loop from 0 to N/2 – 1, loop counter is i
Consider elements in group of 4 in current square, rotate the 4 elements at a time. So the number of such groups in a cycle is N – 2*i.
So run a loop in each cycle from x to N – x – 1, loop counter is y
The elements in the current group is (x, y), (y, N-1-x), (N-1-x, N-1-y), (N-1-y, x), now rotate the these 4 elements, i.e (x, y) <- (y, N-1-x), (y, N-1-x)<- (N-1-x, N-1-y), (N-1-x, N-1-y)<- (N-1-y, x), (N-1-y, x)<- (x, y)
Print the matrix.
Implementation:


// Java program to rotate a
// matrix by 90 degrees
import java.io.*;
 
class GFG {
    // An Inplace function to
    // rotate a N x N matrix
    // by 90 degrees in
    // anti-clockwise direction
    static void rotateMatrix(int N, int mat[][])
    {
        // Consider all squares one by one
        for (int x = 0; x < N / 2; x++) {
            // Consider elements in group
            // of 4 in current square
            for (int y = x; y < N - x - 1; y++) {
                // Store current cell in
                // temp variable
                int temp = mat[x][y];
 
                // Move values from right to top
                mat[x][y] = mat[y][N - 1 - x];
 
                // Move values from bottom to right
                mat[y][N - 1 - x]
                    = mat[N - 1 - x][N - 1 - y];
 
                // Move values from left to bottom
                mat[N - 1 - x][N - 1 - y]
                    = mat[N - 1 - y][x];
 
                // Assign temp to left
                mat[N - 1 - y][x] = temp;
            }
        }
    }
 
    // Function to print the matrix
    static void displayMatrix(int N, int mat[][])
    {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + mat[i][j]);
 
            System.out.print("\n");
        }
        System.out.print("\n");
    }
 
    /* Driver program to test above functions */
    public static void main(String[] args)
    {
        int N = 4;
 
        // Test Case 1
        int mat[][] = { { 1, 2, 3, 4 },
                        { 5, 6, 7, 8 },
                        { 9, 10, 11, 12 },
                        { 13, 14, 15, 16 } };
 
        // Test Case 2
        /* int mat[][] = {
                            {1, 2, 3},
                            {4, 5, 6},
                            {7, 8, 9}
                        };
         */
 
        // Test Case 3
        /*int mat[][] = {
                        {1, 2},
                        {4, 5}
                    };*/
 
        // displayMatrix(mat);
 
        rotateMatrix(N, mat);
 
        // Print rotated matrix
        displayMatrix(N, mat);
    }
}
 
// This code is contributed by Prakriti Gupta
Output
4 8 12 16 
3 7 11 15 
2 6 10 14 
1 5 9 13 
Complexity Analysis: 

Time Complexity: O(n2), where n is side of array. 
A single traversal of the matrix is needed.
Space Complexity: O(1). 
As a constant space is needed
Since no extra space has been taken.
 Easy  to understand and apply

Another Approach:

Reverse every individual  row
Perform Transpose
Implementation:


// Java program to rotate a
// matrix by 90 degrees
import java.io.*;
 
class GFG {
 
  // Function to reverse
  // the given 2D arr[][]
  static void Reverse(int i,int mat[][], int N)
  {
    // Initialise start and end index
    int start = 0;
    int end = N - 1;
 
    // Till start < end, swap the element
    // at start and end index
    while (start < end) {
 
      // Swap the element
      int temp = mat[i][start];
      mat[i][start] = mat[i][end];
      mat[i][end] = temp;
 
      // Increment start and decrement
      // end for next pair of swapping
      start++;
      end--;
    }
  }
 
  // An Inplace function to
  // rotate a N x N matrix
  // by 90 degrees in
  // anti-clockwise direction
 
  static void rotateMatrix(int N, int mat[][])
  { // REVERSE every row
    for (int i = 0; i < N; i++)
      Reverse(i,mat,N);
 
    // Performing Transpose
    for (int i = 0; i < N; i++) {
      for (int j = i; j < N; j++)
      {
        int temp=mat[i][j];
        mat[i][j]=mat[j][i];
        mat[j][i]=temp;
      }
    }
  }
 
  // Function to print the matrix
  static void displayMatrix(int N, int mat[][])
  {
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++)
        System.out.print(" " + mat[i][j]);
 
      System.out.print("\n");
    }
    System.out.print("\n");
  }
 
  /* Driver program to test above functions */
  public static void main(String[] args)
  {
    int N = 4;
 
    // Test Case 1
    int mat[][] = { { 1, 2, 3, 4 },
                   { 5, 6, 7, 8 },
                   { 9, 10, 11, 12 },
                   { 13, 14, 15, 16 } };
 
    rotateMatrix(N, mat);
 
    // Print rotated matrix
    displayMatrix(N, mat);
  }
}
 
// This code is contributed by Aarti_Rathi
Output
4 8 12 16 
3 7 11 15 
2 6 10 14 
1 5 9 13 
Complexity Analysis:  

Time Complexity: O(n2) + O(n2)   where n is size of array.
Auxiliary Space: O(1). As a constant space is needed


]
====================
The only thing that is different is to print the elements of the cycle in a clockwise direction i.e. An N x N matrix will have floor(N/2) square cycles. 
For example, a 3 X 3 matrix will have 1 cycle. The cycle is formed by its 1st row, last column, last row, and 1st column. 
For each square cycle, we swap the elements involved with the corresponding cell in the matrix in the clockwise direction.
We just need a temporary variable for this.

Explanation:

Let size of row and column be 3. 
During first iteration – 
a[i][j] = Element at first index (leftmost corner top)= 1.
a[j][n-1-i]= Rightmost corner top Element = 3.
a[n-1-i][n-1-j] = Rightmost corner bottom element = 9.
a[n-1-j][i] = Leftmost corner bottom element = 7.
Move these elements in the clockwise direction. 
During second iteration – 
a[i][j] = 2.
a[j][n-1-i] = 6.
a[n-1-i][n-1-j] = 8.
a[n-1-j][i] = 4. 
Similarly, move these elements in the clockwise direction. 

Below is the implementation of the above approach: 


// Java implementation of above approach
import java.io.*;
 
class GFG
{
     
static int N = 4;
 
// Function to rotate the matrix 90 degree clockwise
static void rotate90Clockwise(int a[][])
{
 
    // Traverse each cycle
    for (int i = 0; i < N / 2; i++)
    {
        for (int j = i; j < N - i - 1; j++)
        {
 
            // Swap elements of each cycle
            // in clockwise direction
            int temp = a[i][j];
            a[i][j] = a[N - 1 - j][i];
            a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
            a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
            a[j][N - 1 - i] = temp;
        }
    }
}
 
// Function for print matrix
static void printMatrix(int arr[][])
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        System.out.print( arr[i][j] + " ");
        System.out.println();
    }
}
 
// Driver code
 
    public static void main (String[] args)
    {
            int arr[][] = { { 1, 2, 3, 4 },
                      { 5, 6, 7, 8 },
                      { 9, 10, 11, 12 },
                      { 13, 14, 15, 16 } };
    rotate90Clockwise(arr);
    printMatrix(arr);
    }
}
 
// This code has been contributed by inder_verma.
Output
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 
Complexity Analysis:

Time Complexity – O(n*n)

Auxiliary Space – O(1)

Method 2:

Approach: 
The approach is based on the pattern made by indices after rotating the matrix. 
Consider the following illustration to have a clear insight into it.

Consider a 3 x 3 matrix having indices (i, j) as follows. 

00 01 02 
10 11 12 
20 21 22

After rotating the matrix by 90 degrees in clockwise direction, indices transform into
20 10 00  current_row_index = 0, i = 2, 1, 0 
21 11 01 current_row_index = 1, i = 2, 1, 0 
22 12 02  current_row_index = 2, i = 2, 1, 0

Observation: In any row, for every decreasing row index i, there exists a constant column index j, such that j = current_row_index. 

This pattern can be printed using 2 nested loops.
(This pattern of writing indices is achieved by writing the exact indices of the desired elements of 
where they actually existed in the original array.)  

Below is the implementation of the above approach:


// Java implementation of above approach
import java.io.*;
 
class GFG {
    static int N = 4;
 
    // Function to rotate the matrix 90 degree clockwise
    static void rotate90Clockwise(int arr[][])
    {
        // printing the matrix on the basis of
        // observations made on indices.
        for (int j = 0; j < N; j++)
        {
            for (int i = N - 1; i >= 0; i--)
                System.out.print(arr[i][j] + " ");
            System.out.println();
        }
    }
    public static void main(String[] args)
    {
        int arr[][] = { { 1, 2, 3, 4 },
                        { 5, 6, 7, 8 },
                        { 9, 10, 11, 12 },
                        { 13, 14, 15, 16 } };
        rotate90Clockwise(arr);
    }
}
// This code is contributed by yashbeersingh42
Output
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 
Complexity Analysis:

Time Complexity – O(n*n)

Auxiliary Space – O(1)

Method 3:

 Approach: 
 The Approach is to rotate the given matrix two times, first time with respect to the Main diagonal, 
 next time rotate the resultant matrix with respect to the middle column, Consider the following illustration to have a clear insight into it.


 Rotate square matrix 90 degrees in a clockwise direction

Below is the implementation of the above approach:


import java.io.*;
 
class GFG {
   
  static void rotate(int[][] arr) {
 
        int n=arr.length;
     
    // first rotation
    // with respect to main diagonal
        for(int i=0;i<n;++i)
        {
            for(int j=0;j<i;++j)
            {
                int temp = arr[i][j];
                arr[i][j]=arr[j][i];
                arr[j][i]=temp;
            }
        }
         // Second rotation
    // with respect to middle column
        for(int i=0;i<n;++i)
        {
            for(int j=0;j<n/2;++j)
            {
                int temp =arr[i][j];
                arr[i][j] = arr[i][n-j-1];
                arr[i][n-j-1]=temp;
            }
        }
 
    }
   
  // to print matrix
   static void printMatrix(int arr[][])
    {
        int n=arr.length;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
                System.out.print( arr[i][j] + " ");
            System.out.println();
        }
    }
  // Driver code
    public static void main (String[] args) {
       int arr[][] = { { 1, 2, 3, 4 },
                      { 5, 6, 7, 8 },
                      { 9, 10, 11, 12 },
                      { 13, 14, 15, 16 } };
    rotate(arr);
    printMatrix(arr);
    }
}
// This code is contributed  by Rahul Verma
Output
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 
Complexity Analysis:

Time Complexity – O(n*n)

Auxiliary Space – O(1)

Method 4:

Approach: 
This approach is similar to method 3 the only difference is that in first rotation we rotate about the Secondary Diagonal and after that about the Middle row.


 Rotate square matrix 90 degrees in a clockwise direction

Below is the implementation of the above approach:


import java.io.*;
 
class GFG {
 
    static void rotate(int[][] arr)
    {
 
        int n = arr.length;
 
        // first rotation
        // with respect to Secondary diagonal
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[n - 1 - j][n - 1 - i];
                arr[n - 1 - j][n - 1 - i] = temp;
            }
        }
        // Second rotation
        // with respect to middle row
        for (int i = 0; i < n / 2; i++) {
            for (int j = 0; j < n; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[n - 1 - i][j];
                arr[n - 1 - i][j] = temp;
            }
        }
    }
 
    // to print matrix
    static void printMatrix(int arr[][])
    {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                System.out.print(arr[i][j] + " ");
            System.out.println();
        }
    }
    // Driver code
    public static void main(String[] args)
    {
        int arr[][] = { { 1, 2, 3, 4 },
                        { 5, 6, 7, 8 },
                        { 9, 10, 11, 12 },
                        { 13, 14, 15, 16 } };
        rotate(arr);
        printMatrix(arr);
    }
}
// This code is contributed  by Rahul Verma
Output
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 
Complexity Analysis:

Time Complexity – O(n*n)

Auxiliary Space – O(1)

Method 5: 

Approach: We first transpose the given matrix, and then reverse the content of individual rows to get the resultant 90 degree clockwise rotated matrix.

1  2  3                                                1  4  7                                                                 7  4  1

4  5  6        ——Transpose——>    2  5  8         —-Reverse individual rows—->    8  5  2     (Resultant matrix)

7  8  9                                                3  6  9                                                                 9  6  3

Below is the implementation of the above approach:


import java.util.*;
 
class GFG {
    static int n = 4;
 
    static void print(int mat[][]) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                System.out.print(mat[i][j] + " ");
            System.out.println();
        }
    }
 
    static void rotate90clockwise(int mat[][])
    {
       
        // Transpose of matrix
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++) {
                int t = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = t;
            }
 
        // Reverse individual rows
        for (int i = 0; i < n; i++) {
            int low = 0, high = n - 1;
            while (low < high) {
                int t = mat[i][low];
                mat[i][low] = mat[i][high];
                mat[i][high] = t;
                low++;
                high--;
            }
        }
    }
 
  // Driver code
    public static void main(String[] args) {
        int mat[][] = { { 1, 2, 3, 4 },
                       { 5, 6, 7, 8 },
                       { 9, 10, 11, 12 },
                       { 13, 14, 15, 16 } };
        rotate90clockwise(mat);
        print(mat);
    }
}
 
 
// This code is contributed by umadevi9616
Output
13 9 5 1 
14 10 6 2 
15 11 7 3 
16 12 8 4 
Complexity Analysis:

Time Complexity – O(n*n)

Auxiliary Space – O(1)

===================================================================================================================
