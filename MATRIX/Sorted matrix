Given an NxN matrix Mat. Sort all elements of the matrix.

Example 1:

Input:
N=4
Mat=[[10,20,30,40],
[15,25,35,45] 
[27,29,37,48] 
[32,33,39,50]]
Output:
10 15 20 25 
27 29 30 32
33 35 37 39
40 45 48 50
Explanation:
Sorting the matrix gives this result.
Example 2:

Input:
N=3
Mat=[[1,5,3],[2,8,7],[4,6,9]]
Output:
1 2 3 
4 5 6
7 8 9
Explanation:
Sorting the matrix gives this result.
Your Task:
You don't need to read input or print anything. Your task is to complete the function sortedMatrix() 
which takes the integer N and the matrix Mat as input parameters and returns the sorted matrix.


Expected Time Complexity:O(N2LogN)
Expected Auxillary Space:O(N2)


Constraints:
1<=N<=1000
1<=Mat[i][j]<=105

MY_SOLUTION

class Solution {
    int[][] sortedMatrix(int N, int Mat[][]) {
        // code here
        int[] arr = new int[N * N];
        
        int l = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                arr[l++] = Mat[i][j];
            }
        }
        
        Arrays.sort(arr);
        
        int k = 0;
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                //Mat[i][j % N] = arr[k++];
                Mat[i][j] = arr[k++];
            }
            
        }
        return Mat;
        
    }
};

=================================================================================================

class Solution {
   int[][] sortedMatrix(int N, int Mat[][]) {
       ArrayList<Integer> al = new ArrayList<Integer>();
       int p=0;
       for(int i=0; i<N; i++)
       {
           for(int j=0; j<N; j++)
           {
               al.add(Mat[i][j]);
           }
       }
       Collections.sort(al);
       for(int i=0; i<N; i++)
       {
           for(int j=0; j<N; j++)
           {
               Mat[i][j] = al.get(p);
               p++;
           }
       }
       return Mat;
   }
};

=========================================================

class Solution {
    int[][] sortedMatrix(int n, int mat[][]) {
        // temporary matrix of size n^2
        int temp[] = new int[n * n];
        int k = 0;
    
        // copy the elements of matrix 
        // one by one into temp[]
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                temp[k++] = mat[i][j];
    
        // sort temp[]
        Arrays.sort(temp);
        
        // copy the elements of temp[]
        // one by one in mat[][]
        k = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                mat[i][j] = temp[k++];
        
        return mat;
    }
};

==============================================================

Approach: Create a temp[] array of size n^2. Starting with the first row one by one copy the elements of the given matrix into temp[]. 
Sort temp[]. Now one by one copy the elements of temp[] back to the given matrix.

Below is the implementation of the above approach:


// Java implementation to 
// sort the given matrix
import java.io.*;
import java.util.*;

class GFG {
    
    static int SIZE = 10;

    // function to sort the given matrix
    static void sortMat(int mat[][], int n)
    {
        // temporary matrix of size n^2
        int temp[] = new int[n * n];
        int k = 0;
    
        // copy the elements of matrix 
        // one by one into temp[]
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                temp[k++] = mat[i][j];
    
        // sort temp[]
        Arrays.sort(temp);
        
        // copy the elements of temp[]
        // one by one in mat[][]
        k = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                mat[i][j] = temp[k++];
    }
    
    // function to print the given matrix
    static void printMat(int mat[][], int n)
    {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                System.out.print( mat[i][j] + " ");
            System.out.println();
        }
    }
    
    // Driver program to test above
    public static void main(String args[])
    {
        int mat[][] = { { 5, 4, 7 },
                        { 1, 3, 8 },
                        { 2, 9, 6 } };
        int n = 3;
    
        System.out.println("Original Matrix:");
        printMat(mat, n);
    
        sortMat(mat, n);
    
        System.out.println("Matrix After Sorting:");
        printMat(mat, n);
    
    }
}

// This code is contributed by Nikita Tiwari.


Output
Original Matrix:
5 4 7 
1 3 8 
2 9 6 

Matrix After Sorting:
1 2 3 
4 5 6 
7 8 9 
Time Complexity: O(n2log2n). 
Auxiliary Space: O(n2), since n * n extra space has been taken.
