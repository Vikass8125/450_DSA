Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array.
It is given that all array elements are distinct.

Example 1:

Input:
N = 6
arr[] = 7 10 4 3 20 15
K = 3
Output : 7
Explanation :
3rd smallest element in the given 
array is 7.
Example 2:

Input:
N = 5
arr[] = 7 10 4 20 15
K = 4
Output : 15
Explanation :
4th smallest element in the given 
array is 15.
Your Task:
You don't have to read input or print anything. Your task is to complete the function kthSmallest()
which takes the array arr[], integers l and r denoting the starting and ending index of the array and an integer K as input and returns the Kth smallest element.
 
 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(log(n))
Constraints:
1 <= N <= 105
1 <= arr[i] <= 105
1 <= K <= N
 
 
 
 MY_SOLUTION
 
 
 NOTE: 
 
 Possible follow-up questions to ask the interviewer:-

Do we know something about the range of the numbers in the array? No, they can be arbitrary integers.
Are the array elements necessarily positive? No, they can be positive, negative, or zero.
What if K is greater than the size of the array? (Ans: It is guaranteed that 1 ≤ K ≤ n)
Can the original array be modified? (Ans: Sure)
Brute force and efficient solutions
We will be discussing four possible solutions for this problem:-

Brute Force approach : Using sorting
Using Min-Heap
Using Max-Heap
Quick select : Approach similar to quick sort
1. Brute force approach : Using sorting
The idea is to sort the array to arrange the numbers in increasing order and then returning the Kth number from the start.

Pseudo-Code
int kthSmallest(int A[], int n, int K)
{
   sort(A,n)
   return A[K-1]
}
Complexity Analysis
Time Complexity: Sorting the array + Picking Kth element from the start = O(nlogn) + O(1) = O(nlogn)

Space Complexity: If you use merge sort, then O(n), else if you use heap sort, its O(1).

Critical ideas to think!
Do you need to sort the entire array to find the kth smallest element? Try modifying normal sorting algorithms to extract Kth smallest element. 
Also, analyze their complexity.
What is the best sorting algorithm for this problem?
How can we improve the time complexity?
2. Using Min-Heap
This is a good example of problem-solving via a heap data structure. The basic idea here is to create a min-heap of all n elements
and then extract the minimum element K times. The last element to be extracted will be the Kth smallest element.

Solution Steps
Build a min-heap of size n of all elements
Extract the minimum elements K-1 times, i.e. delete the root and perform heapify operation K times.
Return the root of the heap (A[0] would be the root element in the array implementation of the heap)
Pseudo-Code
int kthSmallest(int A[], int n, int K)
{
   build_minHeap(A, n)
   for( i = 0 to K-1 )
        extractMin(A)
   return A[0]
}
Complexity Analysis
Time Complexity: Building the min heap of n elements + Extracting min element K-1 times = O(n) + (K-1) * log(n) = O( n + Klogn)

Space Complexity: O(1) (Why?)

Critical ideas to think!
Can we further optimize the above approach using a min-heap?
Can this problem be solved using Binary Search Tree? What would be the complexity in that case?
Do you need to change this algorithm to handle duplicates?
Understand the implementation and time complexity of basic heap operations like heapify, insert, extract min, etc.
Compare top-down and bottom-up approach of heap building. Which one is a more efficient approach? Do we use extra space in this process?
Why is Heap preferred over BST for Priority Queue?
3. Using Max-Heap
The idea is to construct a max-heap of the smaller elements. 
Since the root of the max-heap is the largest element of the heap, you should use this to your advantage to track the top K smallest elements 
in heap and then returning the root.

Solution Steps
Create a max-heap of first K elements
For each element A[i], K onwards till n, compare it with root
If A[i] < root, replace root with A[i] and heapify the heap.
If A[i] > root, ignore and move on.
3. Return the root of the heap.

Pseudo-Code
int kthSmallest(int A[], int n, int K)
{
   build_maxHeap(A, K)
   for ( i = K to n-1 )
   {
      if ( A[i] < A[0] )
      {
         A[0] = A[i]   // Now A[i] the new root
         heapify(A, 0)
      }
   }
   return A[0]
}
Complexity Analysis
Time Complexity: Building max-heap of k elements + Inserting n-K elements to the heap = O(K) + O((n-K)logK) = O(K + (n-K)logK)

Space Complexity: O(1)

Critical ideas to think!
Do you need to make any changes to handle duplicate elements?
Why do we ignore elements larger than root in the second part of the algorithm?
Prepare a list of problems where we can use min or max heap for the solution.
Thumbnail Image
NEW
Android App Development Online Course by MindOrks
Start your career in Android Development. Learn by doing real projects.

4. Quick-Select : Approach similar to quick sort
This approach is similar to the quick sort algorithm where we use the partition on the input array recursively. 
But unlike quicksort, which processes both sides of the array recursively, this algorithm works on only one side of the partition. 
We recur for either the left or right side according to the position of pivot.

Solution Steps

Partition the array A[left .. right] into two subarrays A[left .. pos] and A[pos + 1 .. right] 
such that each element of A[left .. pos] is less than each element of A[pos + 1 .. right].
Computes the number of elements in the subarray A[left .. pos] i.e. count = pos - left + 1
if (count == K), then A[pos] is the Kth smallest element.
Otherwise determines in which of the two subarrays A[left .. pos-1] and A[pos + 1 .. right] the Kth smallest element lies.
If (count > K) then the desired element lies on the left side of the partition
If (count < K), then the desired element lies on the right side of the partition. 
Since we already know i values that are smaller than the kth smallest element of A[left .. right], 
the desired element is the (K - count)th smallest element of A[pos + 1 .. right].
Base case is the scenario of single element array i.e left ==right. return A[left] or A[right].
Pseudo-Code
// Original value for left = 0 and right = n-1
int kthSmallest(int A[], int left, int right, int K)
{
    if (left == right)
         return A[left]
    int pos = partition(A, left, right)
    count = pos - left + 1
    if ( count == K )
         return A[pos]
    else if ( count > K )      
         return kthSmallest(A, left, pos-1, K)
    else                 
         return kthSmallest(A, pos+1, right, K-i)   
}

int partition(int A[], int l, int r) 
{ 
    int x = A[r]
    int i = l-1
    for ( j = l to r-1 ) 
    { 
        if (A[j] <= x) 
        { 
            i = i + 1
            swap(A[i], A[j])
        } 
    } 
    swap(A[i+1], A[r])
    return i+1
}
Complexity Analysis
Time Complexity: The worst-case time complexity for this algorithm is O(n²), but it can be improved if we choose the pivot element randomly.
If we randomly select the pivot, the expected time complexity would be linear, O(n).

Space Complexity: O(logn) average for recursion call stack (Think!)

Critical ideas to think!
What would be the worst-case if we select pivot randomly?
Median of medians is the ideal pivot selection strategy for the Quick-Select algorithm which works in O(n) time complexity in the worst case. Study about it.
What other sorting algorithms can be exploited to find the kth largest element by partially sorting it?
Why a single-element array is the base case of recursion?
Explore different ways to perform partition of an array
Visualize all the above approaches via simple examples.

 
 ==========================================================================
 class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int K) 
    { 
        //Your code here
        /*
        //BRUTE FORCE
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
        
        for(int i = 0; i < arr.length; i++){
            maxHeap.add(arr[i]);
            
            if(maxHeap.size() > k){
                maxHeap.remove();
            }
        }
        return maxHeap.peek();
        */
        
        // OPTIMISED USING QUICK SELECT
        // If k is smaller than number of elements
        // in array
        if (K > 0 && K <= r - l + 1) {
 
            // Partition the array around last
            // element and get position of pivot
            // element in sorted array
            int pos = partition(arr, l, r);
 
            // If position is same as k
            if (pos - l == K - 1)
                return arr[pos];
 
            // If position is more, recur for
            // left subarray
            if (pos - l > K - 1)
                return kthSmallest(arr, l, pos - 1, K);
 
            // Else recur for right subarray
            return kthSmallest(arr, pos + 1, r,
                               K - pos + l - 1);
        }
 
        // If k is more than number of elements
        // in array
        return Integer.MAX_VALUE;
        
    }
    
    public static int partition(int[] arr, int l, int r)
    {
        int x = arr[r], i = l;
        for (int j = l; j <= r - 1; j++) {
            if (arr[j] <= x) {
 
                // Swapping arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
 
                i++;
            }
        }
 
        // Swapping arr[i] and arr[r]
        int temp = arr[i];
        arr[i] = arr[r];
        arr[r] = temp;
 
        return i;
    }
}
============================================================================

O(n) Solution without sorting the full array.

Min heap solution will be: O(n log k)
Sorting the array will be: O(n log n)
Only solution that results in O(n) is Quick Select.
class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        //Your code here
        findKthSmallest(arr, 0, r, k-1);
        return arr[k-1];
    } 
    
    public static void findKthSmallest(int[] arr, int start, int end, int indexToFind) {
        if(start>=end) {
            return;
        }
        int pivotIndex = new Random().nextInt(end-start)+start;
        int pivot = arr[pivotIndex];
        
        int smaller = start;
        int currentPointer = start+1;
        // bring pivot to the left
        swap(arr, start, pivotIndex);
        
        while(currentPointer <= end) {
            if(arr[currentPointer] < pivot) {
                smaller++;
                swap(arr, smaller, currentPointer);
            } 
            currentPointer++;
        }
        // bring pivot back to its position
        swap(arr, smaller, start);
        pivotIndex = smaller;
        
        if(pivotIndex == indexToFind) {
            return;
        } else if (pivotIndex > indexToFind) { // search left
            findKthSmallest(arr, start, pivotIndex-1, indexToFind);
        } else { // search right
            findKthSmallest(arr, pivotIndex+1, end, indexToFind);
        }
    }
    
    public static void swap(int[] arr, int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}

===========================================================

K’th smallest element in an unsorted array using QuickSelect:
This is an optimization over method 1, if QuickSort is used as a sorting algorithm in first step.
In QuickSort, pick a pivot element, then move the pivot element to its correct position and partition the surrounding array.
The idea is, not to do complete quicksort, but stop at the point where pivot itself is k’th smallest element.
Also, not to recur for both left and right sides of pivot, but recur for one of them according to the position of pivot. 

Follow the given steps to solve the problem:

Run quick sort algorithm on the input array
In this algorithm pick a pivot element and move it to it’s correct position
Now, if index of pivot is equal to K then return the value, else if the index of pivot is greater than K, then recur for the left subarray, 
else recur for the right subarray 
Repeat this process until the element at index K is not found
Below is the Implementation of the above approach:


// Java code for kth smallest element in an array
 
import java.util.Arrays;
import java.util.Collections;
 
class GFG {
    // Standard partition process of QuickSort.
    // It considers the last element as pivot
    // and moves all smaller element to left of
    // it and greater elements to right
    public static int partition(Integer[] arr, int l, int r)
    {
        int x = arr[r], i = l;
        for (int j = l; j <= r - 1; j++) {
            if (arr[j] <= x) {
 
                // Swapping arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
 
                i++;
            }
        }
 
        // Swapping arr[i] and arr[r]
        int temp = arr[i];
        arr[i] = arr[r];
        arr[r] = temp;
 
        return i;
    }
 
    // This function returns k'th smallest element
    // in arr[l..r] using QuickSort based method.
    // ASSUMPTION: ALL ELEMENTS IN ARR[] ARE DISTINCT
    public static int kthSmallest(Integer[] arr, int l,
                                  int r, int K)
    {
        // If k is smaller than number of elements
        // in array
        if (K > 0 && K <= r - l + 1) {
 
            // Partition the array around last
            // element and get position of pivot
            // element in sorted array
            int pos = partition(arr, l, r);
 
            // If position is same as k
            if (pos - l == K - 1)
                return arr[pos];
 
            // If position is more, recur for
            // left subarray
            if (pos - l > K - 1)
                return kthSmallest(arr, l, pos - 1, K);
 
            // Else recur for right subarray
            return kthSmallest(arr, pos + 1, r,
                               K - pos + l - 1);
        }
 
        // If k is more than number of elements
        // in array
        return Integer.MAX_VALUE;
    }
 
    // Driver's code
    public static void main(String[] args)
    {
        Integer arr[]
            = new Integer[] { 12, 3, 5, 7, 4, 19, 26 };
        int K = 3;
 
        // Function call
        System.out.print(
            "K'th smallest element is "
            + kthSmallest(arr, 0, arr.length - 1, K));
    }
}
 
// This code is contributed by Chhavi
Output
K'th smallest element is 5
Time Complexity: O(N2) in worst case and O(N) on average 
Auxiliary Space: O(1)

==========================================================================================

class Solution{
    void swap(int arr[], int l, int r){
        int tmp = arr[l];
        arr[l] = arr[r];
        arr[r] = tmp;
    }
    
    int randomPartition(int arr[], int l, int r){
        int n = r-l+1;
        Random rd = new Random();
        int pivot = rd.nextInt(n);
        swap(arr, l + pivot, r);
        return partition(arr, l, r);
    }
    
    int kthSmallest(int arr[], int l, int r, int k)
    {
        // If k is smaller than number of elements in array
        if (k > 0 && k <= r - l + 1)
        {
            // find a position for random partition
            int pos = randomPartition(arr, l, r);
            
            // if this pos gives the kth smallest element, then return
            if (pos-l == k-1)
                return arr[pos];
                
            // else recurse for the left and right half accordingly
            if (pos-l > k-1)  
                return kthSmallest(arr, l, pos-1, k);
            return kthSmallest(arr, pos+1, r, k-pos+l-1);
        }
    
        return Integer.MAX_VALUE;
    }
    
    int partition(int arr[], int l, int r)
    {
        int x = arr[r], i = l;
        for (int j = l; j <= r - 1; j++)
        {
            if (arr[j] <= x)
            {
                swap(arr, i, j);
                i++;
            }
        }
        swap(arr, i, r);
        return i;
    }
}
