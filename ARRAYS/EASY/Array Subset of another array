Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted. 
 

Example 1:

Input:
a1[] = {11, 1, 13, 21, 3, 7}
a2[] = {11, 3, 7, 1}
Output:
Yes
Explanation:
a2[] is a subset of a1[]

Example 2:

Input:
a1[] = {1, 2, 3, 4, 5, 6}
a2[] = {1, 2, 4}
Output:
Yes
Explanation:
a2[] is a subset of a1[]

Example 3:

Input:
a1[] = {10, 5, 2, 23, 19}
a2[] = {19, 5, 3}
Output:
No
Explanation:
a2[] is not a subset of a1[]
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function isSubset() which takes the array a1[], a2[], 
its size n and m as inputs and return "Yes" if arr2 is subset of arr1 else return "No" if arr2 is not subset of arr1.

 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)


Constraints:
1 <= n,m <= 105
1 <= a1[i], a2[j] <= 105


MY_SOLUTION

class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        ArrayList<Long> set = new ArrayList<>();
         
        for(long ele : a1){
            set.add(ele);
        }
        
        for(long ele : a2){
            if(set.contains(ele)){
                set.remove(ele);
            }
            else return "No";
        }
        
        
        return "Yes";
        
        
    }
}

============================================================================


Naive Approach to Find whether an array is subset of another array
Use two loops: The outer loop picks all the elements of arr2[] one by one. 
The inner loop linearly searches for the element picked by the outer loop. 
If all elements are found then return 1, else return 0.

Below is the implementation of the above approach:


// Java program to find whether an array
// is subset of another array
 
class GFG {
 
    /* Return true if arr2[] is a subset
    of arr1[] */
    static boolean isSubset(int arr1[], int arr2[], int m,
                            int n)
    {
        int i = 0;
        int j = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++)
                if (arr2[i] == arr1[j])
                    break;
 
            /* If the above inner loop
            was not broken at all then
            arr2[i] is not present in
            arr1[] */
            if (j == m)
                return false;
        }
 
        /* If we reach here then all
        elements of arr2[] are present
        in arr1[] */
        return true;
    }
 
    // Driver code
    public static void main(String args[])
    {
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };
 
        int m = arr1.length;
        int n = arr2.length;
 
        if (isSubset(arr1, arr2, m, n))
            System.out.print("arr2[] is "
                             + "subset of arr1[] ");
        else
            System.out.print("arr2[] is "
                             + "not a subset of arr1[]");
    }
}
Output
arr2[] is subset of arr1[] 
Time Complexity: O(m*n)
Auxiliary Space: O(1)

Find whether an array is subset of another array using Sorting and Binary Search
The idea is to sort the given array arr1[], and then for each element in arr2[] do a binary search for it in sorted arr1[]. 
If the element is not found then return 0. 
If all elements are present then return 1.

Illustration:

Given array arr1[] = { 11, 1, 13, 21, 3, 7 } and arr2[] = { 11, 3, 7, 1 }.

Step 1: We will sort the array arr1[], and have arr1[] = { 1, 3, 7, 11, 13, 21}.

Step 2: We will look for each element in arr2[] in arr1[] using binary search.

arr2[] = { 11, 3, 7, 1 }, 11 is present in arr1[] = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 11 is present in arr1[] = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 11 is present in arr1[] = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 11 is present in arr1[] = { 1, 3, 7, 11, 13, 21}
As all the elements are found we can conclude arr2[] is the subset of arr1[].

Algorithm:

The algorithm is pretty straightforward. 

Sort the first array arr1[].
Look for the elements of arr2[] in sorted arr1[].
If we encounter a particular value that is present in arr2[] but not in arr1[], the code will terminate, arr2[] can never be the subset of arr1[].
Else arr2[] is the subset of arr1[].
Below is the code implementation of the above approach :


// Java program to find whether an array
// is subset of another array
class Main {
    /* Return true if arr2[] is a subset of arr1[] */
    static boolean isSubset(int arr1[], int arr2[], int m,
                            int n)
    {
        int i = 0;
 
        sort(arr1, 0, m - 1);
        for (i = 0; i < n; i++) {
            if (binarySearch(arr1, 0, m - 1, arr2[i]) == -1)
                return false;
        }
 
        /* If we reach here then all elements of arr2[]
          are present in arr1[] */
        return true;
    }
 
    /* FOLLOWING FUNCTIONS ARE ONLY
    FOR SEARCHING AND
     * SORTING PURPOSE */
    /* Standard Binary Search function*/
    static int binarySearch(int arr[], int low, int high,
                            int x)
    {
        if (high >= low) {
            /*low + (high - low)/2;*/
            int mid = (low + high) / 2;
 
            /* Check if arr[mid] is the first occurrence of
            x. arr[mid] is first occurrence if x is one of
            the following is true: (i)  mid == 0 and
            arr[mid] == x (ii) arr[mid-1] < x and arr[mid]
            == x
         */
            if ((mid == 0 || x > arr[mid - 1])
                && (arr[mid] == x))
                return mid;
            else if (x > arr[mid])
                return binarySearch(arr, (mid + 1), high,
                                    x);
            else
                return binarySearch(arr, low, (mid - 1), x);
        }
        return -1;
    }
 
    /* This function takes last element as pivot,
       places the pivot element at its correct
       position in sorted array, and places all
       smaller (smaller than pivot) to left of
       pivot and all greater elements to right
       of pivot */
    static int partition(int arr[], int low, int high)
    {
        int pivot = arr[high];
        int i = (low - 1);
 
        for (int j = low; j < high; j++) {
            // If current element is smaller than or
            // equal to pivot
            if (arr[j] <= pivot) {
                i++;
 
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
 
        // swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
 
        return i + 1;
    }
 
    /* The main function that implements QuickSort()
      arr[] --> Array to be sorted,
      low  --> Starting index,
      high  --> Ending index */
    static void sort(int arr[], int low, int high)
    {
        if (low < high) {
            /* pi is partitioning index, arr[pi] is
              now at right place */
            int pi = partition(arr, low, high);
 
            // Recursively sort elements before
            // partition and after partition
            sort(arr, low, pi - 1);
            sort(arr, pi + 1, high);
        }
    }
 
    // Driver Code
    public static void main(String args[])
    {
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };
 
        int m = arr1.length;
        int n = arr2.length;
 
        if (isSubset(arr1, arr2, m, n))
            System.out.print("arr2[] is subset of arr1[] ");
        else
            System.out.print(
                "arr2[] is not a subset of arr1[]");
    }
}
Output
arr2[] is subset of arr1[] 
Time Complexity: O(mLog(m) + nlog(m)). O(mLog(m)) for sorting and O(nlog(m)) for binary searching each element of one array in another. 
In the above code, Quick Sort is used and the worst-case time complexity of Quick Sort is O(m2).
Auxiliary Space: O(n)

Find whether an array is subset of another array using Sorting and Merging
The idea is to sort the two arrays and then iterate on the second array looking for the same values on the first array using two pointers. 
Whenever we encounter the same values we will increment both the pointer and if we encounter any values less than that of the second array, 
we will increment the value of the pointer pointing to the first array.
If the value is greater than that of the second array, we know the second array is not the subset of the first array.

Illustration:

Find whether an array is subset of another array using sorting and merging

Algorithm:

The initial step will be to sort the two arrays.

Set two pointers j and i or arr1[] and arr2[] respectively.
If arr1[j] < arr2[i], we will increase j by 1.
If arr1[j] = arr2[i], we will increase j and i by 1.
If arr1[j] > arr2[i], we will terminate as arr2[] is not the subset of arr1[].
Below is the implementation of the above approach: 


// Java code to find whether an array is subset of
// another array
import java.util.Arrays;
class GFG {
    /* Return true if arr2[] is a subset of arr1[] */
    static boolean isSubset(int arr1[], int arr2[], int m,
                            int n)
    {
        int i = 0, j = 0;
 
        if (m < n)
            return false;
 
        Arrays.sort(arr1); // sorts arr1
        Arrays.sort(arr2); // sorts arr2
 
        while (i < n && j < m) {
            if (arr1[j] < arr2[i])
                j++;
            else if (arr1[j] == arr2[i]) {
                j++;
                i++;
            }
            else if (arr1[j] > arr2[i])
                return false;
        }
 
        if (i < n)
            return false;
        else
            return true;
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };
 
        int m = arr1.length;
        int n = arr2.length;
 
        if (isSubset(arr1, arr2, m, n))
            System.out.println("arr2 is a subset of arr1");
        else
            System.out.println(
                "arr2 is not a subset of arr1");
    }
}
// This code is contributed by Kamal Rawal
Output
arr2[] is subset of arr1[] 
Time Complexity: O(mLog(m) + nLog(n)) which is better than approach 2.
Auxiliary Space: O(1)

Thanks to Parthsarthi for suggesting this method.

Find whether an array is a subset of another array using Hashing
The idea is to insert all the elements of the first array in a HashSet, and then iterate on the second array and find if the element exists in the HashSet,
if the HashSet doesn’t contain any particular value then the second array is not the subset of the first array.

Illustration:

Given array arr1[] = { 11, 1, 13, 21, 3, 7 } and arr2[] = { 11, 3, 7, 1 }.

Step 1: We will store the array arr1[] elements in HashSet

Step 2: We will look for each element in arr2[] in arr1[] using binary search.

arr2[] = { 11, 3, 7, 1 }, 11 is present in the HashSet = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 3 is present in the HashSet = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 7 is present in the HashSet = { 1, 3, 7, 11, 13, 21}
arr2[] = { 11, 3, 7, 1 }, 1 is present in the HashSet = { 1, 3, 7, 11, 13, 21}
As all the elements are found we can conclude arr2[] is the subset of arr1[].

Algorithm:

The algorithm is pretty straightforward. 

Store the first array arr1[] in a HashSet.
Look for the elements of arr2[] in the HashSet.
If we encounter a particular value that is present in arr2[] but not in the HashSet, the code will terminate, arr2[] can never be the subset of arr1[].
Else arr2[] is the subset of arr1[].
Below is the implementation of the above approach:  


// Java code to find whether an array is subset of
// another array
import java.util.HashSet;
class GFG {
    /* Return true if arr2[] is a subset of arr1[] */
    static boolean isSubset(int arr1[], int arr2[], int m,
                            int n)
    {
        HashSet<Integer> hset = new HashSet<>();
 
        // hset stores all the values of arr1
        for (int i = 0; i < m; i++) {
            if (!hset.contains(arr1[i]))
                hset.add(arr1[i]);
        }
 
        // loop to check if all elements
        //  of arr2 also lies in arr1
        for (int i = 0; i < n; i++) {
            if (!hset.contains(arr2[i]))
                return false;
        }
        return true;
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };
 
        int m = arr1.length;
        int n = arr2.length;
 
        if (isSubset(arr1, arr2, m, n))
            System.out.println("arr2 is a subset of arr1");
        else
            System.out.println(
                "arr2 is not a subset of arr1");
    }
}
// This code is contributed by Kamal Rawal
Output
arr2[] is subset of arr1[] 
Time Complexity: O(n*logn)
Auxiliary Space: O(n)

Find whether an array is a subset of another array using Set
The idea is to insert all the elements of the first array and second array in the set, 
if the size of the set is equal to the size of arr1[] then the arr2[] is the subset of arr1[]. As no new elements are found in arr2[] hence is the subset.

Illustration:

Given array arr1[] = { 11, 1, 13, 21, 3, 7 } and arr2[] = { 11, 3, 7, 1 }.

Step 1: We will store the array arr1[] and arr2[] elements in Set

The final Set = { 1, 3, 7, 11, 13, 21}
Step 2: Size of arr1[] = 6 and size of the Set = 6

Hence no new elements are found in arr2[]
As all the elements are found we can conclude arr2[] is the subset of arr1[].

Algorithm:

The algorithm is pretty straightforward. 

Store the first array arr1[] in a Set.
Store the first array arr1[] in the same Set.
If the size of arr1[] = size of the Set, arr2[] is the subset of arr1[].
Else arr2[] is not the subset of arr1[].

import java.io.*;
import java.util.*;
 
class GFG {
    public static void main(String[] args)
    {
 
        int arr1[] = { 11, 1, 13, 21, 3, 7 };
        int arr2[] = { 11, 3, 7, 1 };
        int m = arr1.length;
        int n = arr2.length;
 
        Set<Integer> s = new HashSet<Integer>();
        for (int i = 0; i < m; i++) {
            s.add(arr1[i]);
        }
        int p = s.size();
        for (int i = 0; i < n; i++) {
            s.add(arr2[i]);
        }
 
        if (s.size() == p) {
            System.out.println("arr2[] is subset of arr1[] "
                               + "\n");
        }
        else {
            System.out.println(
                "arr2[] is not subset of arr1[] "
                + "\n");
        }
    }
}
 
// This code is contributed by avanitrachhadiya2155
Output
arr2[] is subset of arr1[] 
Time Complexity: O(m+n) because we are using unordered_set and inserting in it,
If we would be using an ordered set inserting would have taken log n increasing the TC to O(mlogm+nlogn), but order does not matter in this approach.
Auxiliary Space: O(n+m)

Find whether an array is a subset of another array using the Frequency Table
The idea is to store the frequency of the elements present in the first array, then look for the elements present in arr2[] in the frequency array. 
As no new elements are found in arr2[] hence is the subset.

Illustration:

Given array arr1[] = { 11, 1, 13, 21, 3, 7 } and arr2[] = { 11, 3, 7, 1 }.

Step 1: We will store the array arr1[] elements frequency in the frequency array

The frequency array will look like this

Frequnecy array

Step 2: We will look for arr2[] elements in the frequnecy array.

arr2[] = { 11, 3, 7, 1 }, 11 is present in the Frequnecy array
arr2[] = { 11, 3, 7, 1 }, 3 is present in the Frequnecy array
arr2[] = { 11, 3, 7, 1 }, 7 is present in the Frequnecy array
arr2[] = { 11, 3, 7, 1 }, 1 is present in the Frequnecy array
As all the elements are found we can conclude arr2[] is the subset of arr1[].

Algorithm:

The algorithm is pretty straightforward. 

Store the frequency of the first array elements of arr1[] in the frequency array.
Iterate on the arr2[] and look for its elements in the frequency array.
If the value is found in the frequency array reduce the frequency value by one.
If for any elements in arr2[] frequency is less than 1, we will conclude arr2[] is not the subset of arr1[],
Below is the implementation of the above approach:   


// Java program to find whether an array
// is subset of another array
import java.io.*;
import java.util.*;
 
class GFG {
 
    // Return true if arr2[] is a subset of arr1[]
    static boolean isSubset(int[] arr1, int m, int[] arr2,
                            int n)
    {
 
        // Create a Frequency Table using STL
        HashMap<Integer, Integer> frequency
            = new HashMap<Integer, Integer>();
 
        // Increase the frequency of each element
        // in the frequency table.
        for (int i = 0; i < m; i++) {
            frequency.put(arr1[i],
                          frequency.getOrDefault(arr1[i], 0)
                              + 1);
        }
 
        // Decrease the frequency if the
        // element was found in the frequency
        // table with the frequency more than 0.
        // else return 0 and if loop is
        // completed return 1.
        for (int i = 0; i < n; i++) {
            if (frequency.getOrDefault(arr2[i], 0) > 0)
                frequency.put(arr2[i],
                              frequency.get(arr1[i]) - 1);
            else {
                return false;
            }
        }
        return true;
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int[] arr1 = { 11, 1, 13, 21, 3, 7 };
        int[] arr2 = { 11, 3, 7, 1 };
 
        int m = arr1.length;
        int n = arr2.length;
 
        if (isSubset(arr1, m, arr2, n))
            System.out.println(
                "arr2[] is subset of arr1[] ");
        else
            System.out.println(
                "arr2[] is not a subset of arr1[] ");
    }
}
 
// This code is contributed by akhilsaini
Output
arr2[] is subset of arr1[] 
Time Complexity: O(m+n) which is better than methods 1,2,3
Auxiliary Space: O(n)

Note that method 1, method 2, method 4, and method 5 don’t handle the cases when we have duplicates in arr2[]. 
For example, {1, 4, 4, 2} is not a subset of {1, 4, 2}, but these methods will print it as a subset.  
