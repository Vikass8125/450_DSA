Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays.

Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.

Example 1:

Input:
5 3
1 2 3 4 5
1 2 3
Output: 
5
Explanation: 
1, 2, 3, 4 and 5 are the
elements which comes in the union set
of both arrays. So count is 5.
Example 2:

Input:
6 2 
85 25 1 32 54 6
85 2 
Output: 
7
Explanation: 
85, 25, 1, 32, 54, 6, and
2 are the elements which comes in the
union set of both arrays. So count is 7.
Your Task:
Complete doUnion funciton that takes a, n, b, m as parameters and returns the count of union elements of the two arrays. The printing is done by the driver code.

Constraints:
1 ≤ n, m ≤ 105
0 ≤ a[i], b[i] < 105

Elements are not necessarily distinct.

Expected Time Complexity : O((n+m)log(n+m))
Expected Auxilliary Space : O(n+m)

MY_SOLUTION

class Solution{
    public static int doUnion(int a[], int n, int b[], int m) 
    {
        //Your code here
        Set<Integer> set = new HashSet<>();
        
        for(int i = 0; i < n; i++){
            set.add(a[i]);
        }
        
        for(int i = 0; i < m; i++){
            set.add(b[i]);
        }
        
        return set.size();
        
    }
}

=======================================
class Solution{
    public static int doUnion(int a[], int n, int b[], int m) 
        {
            //using HashSet to store the elements.
            HashSet<Integer> s=new HashSet<>();
        	    
        	//we insert all the elements of first array in HashSet.
        	for(int i = 0;i<n;i++)
        	   s.add(a[i]);
        	    
        	 //we insert all the elements of second array in HashSet.
    	     //HashSet does not contain duplicates.
        	 for(int i = 0;i<m;i++)
        	    s.add(b[i]);
        	    
        	  //returning the size of HashSet which is total number
        	  //of elements in HashSet.
        	  return s.size() ;
        	    
    }
}

=======================================

Java solution using stream:

Step 1: Create a List of Integers from Array a using stream.

Step 2: Add all elements of Array b in that List.

Step 3: Use distinct() method of stream to remove any duplicate elements. 

Step 4: Return size of the List.

 

class Solution{
   public static int doUnion(int a[], int n, int b[], int m) 
   {
       //Your code here
       List<Integer> list = Arrays.stream(a).boxed().collect(java.util.stream.Collectors.toList());
       
       list.addAll(Arrays.stream(b).boxed().collect(java.util.stream.Collectors.toList()));
       
       list = list.stream().distinct().collect(java.util.stream.Collectors.toList());
       
       return list.size();
   }
}

=============================================
// https://www.geeksforgeeks.org/find-union-and-intersection-of-two-unsorted-arrays/

Method 1 (Using Set):

Union of two arrays we can get with the Set data structure very easily. Set is a data structure that allows only the distinct elements in it.
So, when we put the elements of both the array into the set we will get only the distinct elements that are equal to the union operation over the arrays.
Let’s code it now –> 


// Java program for the union of two arrays using Set
import java.util.*;
 
class GFG{
static void getUnion(int a[], int n, int b[], int m)
{
     
    // Defining set container s
    HashSet<Integer> s = new HashSet<>();
   
    // Inserting array elements in s
    for (int i = 0; i < n; i++)
      s.add(a[i]);
   
    for (int i = 0; i < m; i++)
        s.add(b[i]);
    System.out.print("Number of elements after union operation: " +  s.size() +"\n");
      System.out.print("The union set of both arrays is :" +"\n");
     
        System.out.print(s.toString()+ " "); // s will contain only distinct
                     // elements from array a and b
}
 
// Driver Code
public static void main(String[] args)
{
    int a[] = { 1, 2, 5, 6, 2, 3, 5, 7, 3 };
    int b[] = { 2, 4, 5, 6, 8, 9, 4, 6, 5, 4 };
 
    getUnion(a, 9, b, 10);
}
}
 
// This code is contributed by gauravrajput1
Output
Number of elements after union operation: 9
The union set of both arrays is :
1 2 3 4 5 6 7 8 9 
Time Complexity: O(m * log(m) + n * log(n))

Note: O(m + n) in case of Python because in python the set built-in method is quite different than that of C++ once, Python uses an hash map internally.

We can improve performance of getUnion method by iterating over both the arrays for index from 0 to min(n, m)-1 adding all the elements in both the arrays to the set,
and then iterate over the other array with the remaining elements and add them to the set.


// Java program for the union of two arrays using Set
import java.util.*;
 
class GFG {
    static void getUnion(int a[], int n, int b[], int m)
    {
        // find min of n and m
        int min = (n < m) ? n : m;
 
        // set container
        Set<Integer> set = new HashSet<>();
 
        // add elements from both the arrays for
        // index from 0 to min(n, m)-1
        for (int i = 0; i < min; i++) {
            set.add(a[i]);
            set.add(b[i]);
        }
 
        // add remiaining elements to the set from the other
        // array (having greater length)
        // note that only one of the loops will execute
        if (n > m) {
            for (int i = m; i < n; i++) {
                set.add(a[i]);
            }
        }
        else if (n < m) {
            for (int i = n; i < m; i++) {
                set.add(b[i]);
            }
        }
 
        // driver code to print the output
        System.out.println("Number of elements after union operation: " + set.size());
        System.out.println("The union set of both arrays is :");
        System.out.print(set.toString());
    }
    // Driver Code
    public static void main(String[] args)
    {
        int a[] = { 1, 2, 5, 6, 2, 3, 5, 7, 3 };
        int b[] = { 2, 4, 5, 6, 8, 9, 4, 6, 5, 4 };
 
        getUnion(a, 9, b, 10);
    }
}
 
// This code is contributed by Parth Malhotra
Output
Number of elements after union operation: 9
The union set of both arrays is :
[1, 2, 3, 4, 5, 6, 7, 8, 9]
Time Complexity: O( max(m,n) )

Method 2: (Using map data structure)

From the knowledge of data structures, we know that map stores distinct keys only. So if we insert any key appearing more than one time it gets stored only once. 
The idea is to insert both the arrays in one common map which would then store the distinct elements of both arrays (union of both the array).

Below is the implementation of the above method:


// Java program for the above approach
import java.io.*;
import java.util.*;
 
class GFG{
 
static void printUnion(int[] a, int n,
                       int[] b, int m)
{
    Map<Integer,
        Integer> mp = new HashMap<Integer,
                                  Integer>();
     
    // Inserting array elements in mp
    for(int i = 0; i < n; i++)
    {
        mp.put(a[i], i);
    }
    for(int i = 0; i < m; i++)
    {
        mp.put(b[i], i);
    }
     
    System.out.println("The union set of both arrays is :");
    for(Map.Entry mapElement : mp.entrySet())
    {
        System.out.print(mapElement.getKey() + " ");
         
        // mp will contain only distinct
        // elements from array a and b
    }
}
 
// Driver Code
public static void main (String[] args)
{
    int a[] = { 1, 2, 5, 6, 2, 3, 5 };
    int b[] = { 2, 4, 5, 6, 8, 9, 4, 6, 5 };
     
    printUnion(a, 7, b, 9);
}
}
 
// This code is contributed by avanitrachhadiya2155
Output
The union set of both arrays is :
1 2 3 4 5 6 8 9 
The above method has time complexity O(m+n).

*This method is suggested by Vinay Verma

Method 3 (Naive) 

Union: 

Initialize union U as empty.
Copy all elements of the first array to U.
Do the following for every element x of the second array:
If x is not present in the first array, then copy x to U.
Return U.
Intersection: 

Initialize intersection I as empty.
Do the following for every element x of the first array
If x is present in the second array, then copy x to I.
Return I.
The time complexity of this method is O(mn) for both operations. Here m and n are numbers of elements in arr1[] and arr2[] respectively.

However, above method works only for distinct elements in input arrays.

Method 4 (Use Sorting) 

Sort arr1[] and arr2[]. This step takes O(mLogm + nLogn) time.
Use O(m + n) algorithms to find the union and intersection of two sorted arrays.
The overall time complexity of this method is O(mLogm + nLogn).

Method 5 (Use Sorting and Searching) 
Union: 

Initialize union U as empty.
Find smaller m and n and sort the smaller array.
Copy the smaller array to U.
For every element x of a larger array, do the following
Binary Search x in the smaller array. If, x is not present, then copy it to U.
Return U.
Intersection: 

Initialize intersection I as empty.
Find smaller of m and n and sort the smaller array.
For every element x of a larger array, do the following
Binary Search x in the smaller array. If x is present, then copy it to I.
Return I.
Time complexity of this method is min(mLogm + nLogm, mLogn + nLogn) which can also be written as O((m+n)Logm, (m+n)Logn). 
This approach works much better than the previous approach when the difference between the sizes of two arrays is significant.
Thanks to use_the_force for suggesting this method in a comment here. 

Below is the implementation of this method. However, this method also works only for distinct elements in input arrays.


// A Java program to print union and intersection
/// of two unsorted arrays
import java.util.Arrays;
 
class UnionAndIntersection {
    // Prints union of arr1[0..m-1] and arr2[0..n-1]
    void printUnion(int arr1[], int arr2[], int m, int n)
    {
        // Before finding union, make sure arr1[0..m-1]
        // is smaller
        if (m > n) {
            int tempp[] = arr1;
            arr1 = arr2;
            arr2 = tempp;
 
            int temp = m;
            m = n;
            n = temp;
        }
 
        // Now arr1[] is smaller
        // Sort the first array and print its elements
        // (these two steps can be swapped as order in
        // output is not important)
        Arrays.sort(arr1);
        for (int i = 0; i < m; i++)
            System.out.print(arr1[i] + " ");
 
        // Search every element of bigger array in smaller
        // array and print the element if not found
        for (int i = 0; i < n; i++) {
            if (binarySearch(arr1, 0, m - 1, arr2[i]) == -1)
                System.out.print(arr2[i] + " ");
        }
    }
 
    // Prints intersection of arr1[0..m-1] and arr2[0..n-1]
    void printIntersection(int arr1[], int arr2[], int m,
                           int n)
    {
        // Before finding intersection, make sure
        // arr1[0..m-1] is smaller
        if (m > n) {
            int tempp[] = arr1;
            arr1 = arr2;
            arr2 = tempp;
 
            int temp = m;
            m = n;
            n = temp;
        }
 
        // Now arr1[] is smaller
        // Sort smaller array arr1[0..m-1]
        Arrays.sort(arr1);
 
        // Search every element of bigger array in smaller
        // array and print the element if found
        for (int i = 0; i < n; i++) {
            if (binarySearch(arr1, 0, m - 1, arr2[i]) != -1)
                System.out.print(arr2[i] + " ");
        }
    }
 
    // A recursive binary search function. It returns
    // location of x in given array arr[l..r] is present,
    // otherwise -1
    int binarySearch(int arr[], int l, int r, int x)
    {
        if (r >= l) {
            int mid = l + (r - l) / 2;
 
            // If the element is present at the middle
            // itself
            if (arr[mid] == x)
                return mid;
 
            // If element is smaller than mid, then it can
            // only be present in left subarray
            if (arr[mid] > x)
                return binarySearch(arr, l, mid - 1, x);
 
            // Else the element can only be present in right
            // subarray
            return binarySearch(arr, mid + 1, r, x);
        }
 
        // We reach here when element is not present in
        // array
        return -1;
    }
 
    // Driver code
    public static void main(String[] args)
    {
        UnionAndIntersection u_i
            = new UnionAndIntersection();
        int arr1[] = { 7, 1, 5, 2, 3, 6 };
        int arr2[] = { 3, 8, 6, 20, 7 };
        int m = arr1.length;
        int n = arr2.length;
       
        // Function call
        System.out.println("Union of two arrays is ");
        u_i.printUnion(arr1, arr2, m, n);
        System.out.println("");
        System.out.println(
            "Intersection of two arrays is ");
        u_i.printIntersection(arr1, arr2, m, n);
    }
}
Output
Union of two arrays is n3 6 7 8 20 1 5 2 nIntersection of two arrays is n7 3 6 
Another Approach (When elements in the array may not be distinct) :


// Java code to find intersection when
// elements may not be distinct
 
import java.io.*;
import java.util.Arrays;
 
class GFG {
 
    // Function to find intersection
    static void intersection(int a[], int b[], int n, int m)
    {
        int i = 0, j = 0;
 
        while (i < n && j < m) {
 
            if (a[i] > b[j]) {
                j++;
            }
 
            else if (b[j] > a[i]) {
                i++;
            }
            else {
                // when both are equal
                System.out.print(a[i] + " ");
                i++;
                j++;
            }
        }
    }
 
    // Driver Code
    public static void main(String[] args)
    {
        int a[] = { 1, 3, 2, 3, 4, 5, 5, 6 };
        int b[] = { 3, 3, 5 };
 
        int n = a.length;
        int m = b.length;
       
        // sort
        Arrays.sort(a);
        Arrays.sort(b);
       
        // Function call
        intersection(a, b, n, m);
    }
}
Output
3 3 5 
 Thanks, Sanny Kumar for suggesting the above method.

Method 6(Without using hashing or any predefined library like sets or maps and works even for both repeated and distant elements)

First of all we sort both arrays and proceed as below:

Union

Iterate in while loop until any one array is finished.
In each iteration we look for smaller in both arrays and we print it and increment its pointer only if it is not same as the last element printed in union.
After we finish while we iterate the remaining of two array in the similar way as above and print the union.
Intersection

Iterate in while loop till any of the one array is finished.
In each iteration we look for smaller of the two elements from both the array and increase its pointer because it will not be in other list, 
hence not part of intersection.
For intersection,ff both the elements are equal we print it and increment both pointer only if it is not same as the last element printed in intersection.

// Java program to implement the approach
import java.util.*;
 
class GFG
{
    // Function to find union
    static void Union(int[] a, int[] b, int n, int m)  {
             
             
            int[] result=new int[n+m];
             
            int index=0;
            int left=0,right=0;
            while(left<n && right<m){
                 
                if(a[left]<b[right]){
                   if(index!=0 && a[left]==result[index-1]){
                       left++;
                   }else{
                       result[index]=a[left];
                       left++;
                       index++;
                   }
                }else{
                    if(index!=0 && b[right]==result[index-1]){
                       right++;
                   }else{
                       result[index]=b[right];
                       right++;
                       index++;
                   }
                }
            }
             
            while(left<n){
                if(index!=0 && a[left]==result[index-1]){
                       left++;
                   }else{
                       result[index]=a[left];
                       left++;
                       index++;
                   }
            }
             
            while(right<m){
                if(index!=0 && b[right]==result[index-1]){
                       right++;
                   }else{
                       result[index]=b[right];
                       right++;
                       index++;
                   }
            }
               
              System.out.print("Union: ");
              for(int k=0;k<index;k++)
                  System.out.print(result[k] + " ");
              System.out.println("");
           
             
             
         
    }
     
    // Function to find intersection
    static void intersection(int[] a, int[] b, int n, int m) {
             
             
            int i=0,j=0,k=0;
            int[] result=new int[n+m];
            while(i<n && j<m){
            if(a[i]<b[j])
                i++;
            else if(a[i]>b[j])
                j++;
            else{
                if(k!=0 && a[i]==result[k-1]){
                    i++;
                    j++;
                }
                else{
                    result[k]=a[i];
                    i++;
                    j++;
                    k++;
                }
            }
            }
              System.out.print("Intersection: ");
              for(int x=0;x<k;x++)
                  System.out.print(result[x] + " ");
              System.out.println();
             
             
        }
     
     
    // Driver Code
    public static void main(String[] args)
    {
        int[] a = { 1, 3, 2, 3, 3, 4, 5, 5, 6 };
        int[] b = { 3, 3, 5 };
     
        int n = a.length;
        int m = b.length;
       
        // sort
        Arrays.sort(a);
        Arrays.sort(b);
       
        // Function call
          Union(a,b,n,m);
        intersection(a, b, n, m);
    }
}
 
 
// This code is contributed by phasing17
Method 7 (Use Hashing) 
Union 

Initialize an empty hash set hs.
Iterate through the first array and put every element of the first array in the set S.
Repeat the process for the second array.
Print the set hs.
Intersection 

Initialize an empty set hs.
Iterate through the first array and put every element of the first array in the set S.
For every element x of the second array, do the following :
Search x in the set hs. If x is present, then print it. Time complexity of this method is ?
(m+n) under the assumption that hash table search and insert operations take ?(1) time.

Below is the implementation of the above idea:


// Java program to find union and intersection
// using Hashing
import java.util.HashSet;
 
class Test {
    // Prints union of arr1[0..m-1] and arr2[0..n-1]
    static void printUnion(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();
 
        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);
        for (int i = 0; i < arr2.length; i++)
            hs.add(arr2[i]);
        System.out.println(hs);
    }
 
    // Prints intersection of arr1[0..m-1] and arr2[0..n-1]
    static void printIntersection(int arr1[], int arr2[])
    {
        HashSet<Integer> hs = new HashSet<>();
        HashSet<Integer> hs1 = new HashSet<>();
 
        for (int i = 0; i < arr1.length; i++)
            hs.add(arr1[i]);
 
        for (int i = 0; i < arr2.length; i++)
            if (hs.contains(arr2[i]))
                System.out.print(arr2[i] + " ");
    }
 
    // Driver code
    public static void main(String[] args)
    {
        int arr1[] = { 7, 1, 5, 2, 3, 6 };
        int arr2[] = { 3, 8, 6, 20, 7 };
 
        // Function call
        System.out.println("Union of two arrays is : ");
        printUnion(arr1, arr2);
 
        System.out.println(
            "Intersection of two arrays is : ");
        printIntersection(arr1, arr2);
    }
}
Output
1 2 3 5 6 7 8 20 
3 6 7 
This method is contributed by Ankur Singh.
The time complexity of this method is O(m+n) under the assumption that hash table search and insert operations take O(1) time.

Method 8 (Kind of hashing technique without using any predefined Java Collections) 

Initialize the array with a size of m+n
Fill first array value in a resultant array by doing hashing(to find appropriate position)
Repeat for the second array
While doing hashing if a collision happens increment the position in a recursive way
Below is the implementation of the above code: 


// Java program to find union and intersection
// using similar Hashing Technique
// without using any predefined Java Collections
// Time Complexity best case & avg case = O(m+n)
// Worst case = O(nlogn)
 
// package com.arrays.math;
 
public class UnsortedIntersectionUnion {
 
    // Prints intersection of arr1[0..n1-1] and
    // arr2[0..n2-1]
    public void findPosition(int a[], int b[])
    {
        int v = (a.length + b.length);
        int ans[] = new int[v];
 
        int zero1 = 0;
        int zero2 = 0;
 
        System.out.print("Intersection : ");
        // Iterate first array
        for (int i = 0; i < a.length; i++)
            zero1 = iterateArray(a, v, ans, i);
 
        // Iterate second array
        for (int j = 0; j < b.length; j++)
            zero2 = iterateArray(b, v, ans, j);
 
        int zero = zero1 + zero2;
        placeZeros(v, ans, zero);
        printUnion(v, ans, zero);
    }
 
    // Prints union of arr1[0..n1-1] and arr2[0..n2-1]
    private void printUnion(int v, int[] ans, int zero)
    {
        int zero1 = 0;
        System.out.print("\nUnion : ");
        for (int i = 0; i < v; i++) {
            if ((zero == 0 && ans[i] == 0)
                || (ans[i] == 0 && zero1 > 0))
                continue;
            if (ans[i] == 0)
                zero1++;
            System.out.print(ans[i] + ",");
        }
    }
 
    private void placeZeros(int v, int[] ans, int zero)
    {
        if (zero == 2) {
            System.out.println("0");
            int d[] = { 0 };
            placeValue(d, ans, 0, 0, v);
        }
        if (zero == 1) {
            int d[] = { 0 };
            placeValue(d, ans, 0, 0, v);
        }
    }
 
    // Function to iterate array
    private int iterateArray(int[] a, int v, int[] ans,
                             int i)
    {
        if (a[i] != 0) {
            int p = a[i] % v;
            placeValue(a, ans, i, p, v);
        }
        else
            return 1;
        return 0;
    }
 
    private void placeValue(int[] a, int[] ans, int i,
                            int p, int v)
    {
        p = p % v;
        if (ans[p] == 0)
            ans[p] = a[i];
        else {
            if (ans[p] == a[i])
                System.out.print(a[i] + ",");
            else {
 
                // Hashing collision happened increment
                // position and do recursive call
                p = p + 1;
                placeValue(a, ans, i, p, v);
            }
        }
    }
 
    // Driver code
    public static void main(String args[])
    {
        int a[] = { 7, 1, 5, 2, 3, 6 };
        int b[] = { 3, 8, 6, 20, 7 };
 
        // Function call
        UnsortedIntersectionUnion uiu
            = new UnsortedIntersectionUnion();
        uiu.findPosition(a, b);
    }
}
// This code is contributed by Mohanakrishnan S.
Output
Intersection : 3,6,7,
Union : 1,2,3,5,6,7,8,20,

// Java program to find union and intersection
// using sets
 
import java.util.*;
 
public class GFG {
 
  static void printUnion(int arr1[], int arr2[], int n1,
                         int n2)
  {
    // Defining set container s
    Set<Integer> s = new HashSet<Integer>();
 
    //  Insert the elements of arr1[] to set s
    for (int i = 0; i < n1; i++) {
      s.add(arr1[i]);
    }
 
    //  Insert the elements of arr2[] to set s
    for (int i = 0; i < n2; i++) {
      s.add(arr2[i]);
    }
 
    System.out.println("Union");
    for (int itr : s)
      // s will contain only distinct
      // elements from array a and b
      System.out.print(itr + " ");
 
    System.out.println();
  }
 
  static void printIntersection(int arr1[], int arr2[],
                                int n1, int n2)
  {
    // Defining set container s
    Set<Integer> s = new HashSet<Integer>();
 
    //  Insert the elements of arr1[] to set s
    for (int i = 0; i < n1; i++) {
      s.add(arr1[i]);
    }
 
    System.out.println("Intersection");
 
    for (int i = 0; i < n2; i++) {
      // If element is present in set then
      if (s.contains(arr2[i])) {
        System.out.print(arr2[i] + " ");
      }
    }
 
    System.out.println();
  }
 
  // Driver code
  public static void main(String args[])
  {
    int arr1[] = { 7, 1, 5, 2, 3, 6 };
    int arr2[] = { 3, 8, 6, 20, 7 };
    int n1 = arr1.length;
    int n2 = arr2.length;
 
    // Function call
    printUnion(arr1, arr2, n1, n2);
    printIntersection(arr1, arr2, n1, n2);
  }
}
// This code is contributed by Aarti_Rathi
Output
Union:
1 2 3 5 6 7 8 20 

Intersection:
3 6 7 
