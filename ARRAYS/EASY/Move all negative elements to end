Given an unsorted array arr[] of size N having both negative and positive integers. The task is place all negative element at the end of array 
without changing the order of positive element and negative element.

 

Example 1:

Input : 
N = 8
arr[] = {1, -1, 3, 2, -7, -5, 11, 6 }
Output : 
1  3  2  11  6  -1  -7  -5

Example 2:

Input : 
N=8
arr[] = {-5, 7, -3, -4, 9, 10, -1, 11}
Output :
7  9  10  11  -5  -3  -4  -1
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function segregateElements() which takes the array arr[] and
its size N as inputs and store the answer in the array arr[] itself.

MY_SOLUTION

class Solution {
    
    public void segregateElements(int arr[], int n)
    {
        // Your code goes here
        int a = 0, b = 0;
        int[] posArr = new int[n];
        int[] negArr = new int[n];
        
        for(int i = 0; i < n; i++){
            if(arr[i] < 0) negArr[b++] = arr[i];
            else posArr[a++] = arr[i];
        }
        
        int i = 0;
        while(i < n && posArr[i] != 0){
            arr[i] = posArr[i];
            i++;
        }
        int j = 0;
        while(i < n && negArr[j] != 0){
            arr[i] = negArr[j];
            i++;
            j++;
        }
    
     }
}
=================================

class Solution {
   
   public void segregateElements(int arr[], int n)
   {
       // Your code goes here
       // Let's first count the number of negative elements
       int c=0;
       for(int i=0;i<n;i++)
       {
           if(arr[i]<0)
           c++;
       }
       int[] aux=new int[n];
       int low=0,high=n-c; //So we will start storing the +ve elements from low & -ve elements from high
       for(int i=0;i<n;i++) {
           if(arr[i]>0)
           {
               aux[low]=arr[i];
               low++;
           }
           else
           {
               aux[high]=arr[i];
               high++;
           }
       }
       for(int i=0;i<n;i++)
       {
           arr[i]=aux[i];
       }
   }
}

==========================
public void segregateElements(int arr[], int n)
    {
        ArrayList<Integer> pos=new ArrayList<>();
        ArrayList<Integer> neg=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(arr[i]<0){
                neg.add(arr[i]);
            }else{
                pos.add(arr[i]);
            }
        }
        for(int i=0;i<n;i++){
            if(i<pos.size()){
                arr[i]=pos.get(i);
            }else{
                arr[i]=neg.get(i-pos.size());
            }
        }
    }
    
===================================

class Solution {
   
   public void segregateElements(int arr[], int n)
   {
       // Your code goes here
       int temp[] = new int[n];
       
       int j =0;
       
       for(int i =0;i<n;i++){
           if(arr[i]>=0){
               temp[j++]= arr[i];
           }
           
       }
       if(j == n || j == 0){
       return;
   }
   for(int i =0;i<n;i++){
       if(arr[i]<0){
           temp[j++] = arr[i];
       }
   }
   for(int i =0;i<n;i++){
       arr[i]= temp[i];
   }
   
   }
}

==============================
The problem becomes easier if we are allowed to use extra space. Idea is create an empty array (temp[]). First we store all positive element of given array and then we store all negative element of array in Temp[]. Finally we copy temp[] to original array.

Implementation:


// Java program to Move All -ve Element At End
// Without changing order Of Array Element
import java.util.Arrays;
 
class GFG {
     
    // Moves all -ve element to end of array in
    // same order.
    static void segregateElements(int arr[], int n)
    {
         
        // Create an empty array to store result
        int temp[] = new int[n];
 
        // Traversal array and store +ve element in
        // temp array
        int j = 0; // index of temp
         
        for (int i = 0; i < n; i++)
            if (arr[i] >= 0)
                temp[j++] = arr[i];
 
        // If array contains all positive or all
        // negative.
        if (j == n || j == 0)
            return;
 
        // Store -ve element in temp array
        for (int i = 0; i < n; i++)
            if (arr[i] < 0)
                temp[j++] = arr[i];
 
        // Copy contents of temp[] to arr[]
        for (int i = 0; i < n; i++)
            arr[i] = temp[i];
    }
     
    // Driver code
    public static void main(String arg[])
    {
        int arr[] = { 1, -1, -3, -2, 7, 5, 11, 6 };
        int n = arr.length;
 
        segregateElements(arr, n);
 
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + " ");
    }
}
 
// This code is contributed by Anant Agarwal.
Output
1 7 5 11 6 -1 -3 -2 
Time Complexity : O(n) 
Auxiliary space : O(n), since n extra space has been taken.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)
 


Constraints:
1 ≤ N ≤ 105
-105 ≤ arr[] ≤ 105
