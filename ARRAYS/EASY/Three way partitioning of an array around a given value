Given an array of size n and a range [a, b]. The task is to partition the array around the range such that array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.


Example 1:

Input: 
n = 5
A[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 1
Explanation: One possible arrangement is:
{1, 2, 3, 3, 4}. If you return a valid
arrangement, output will be 1.


Example 2:

Input: 
n = 3 
A[] = {1, 2, 3}
[a, b] = [1, 3]
Output: 1
Explanation: One possible arrangement 
is: {1, 2, 3}. If you return a valid
arrangement, output will be 1.


Your Task:
You dont need to read input or print anything. The task is to complete the function threeWayPartition() 
which takes the array[], a and b as input parameters and modifies the array in-place according to the given conditions.
Note: The generated output is 1 if you modify the given array successfully.


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)


Constraints:
1 <= n <= 106
1 <= A[i] <= 106

MY_SOLUTION


class Solution{
    //Function to partition the array around the range such 
    //that array is divided into three parts.
    public void threeWayPartition(int array[], int a, int b)
    
    {
    
      /*
        Arrays.sort(array);
       */
       
      // DFNS Algorithm  
      
      int n=array.length;
      int low=0,mid=0,h=n-1;
      //low is for last smallest element
      //h is for last highest element and mid is lie //between a &b
      while(mid<=h)
      {   /*now if we get array[mid] is less than a then
      swap array[mid] with array[low] and increase mid and low*/ 
          if(array[mid]<a)
          {
              int t=array[mid];
              array[mid]=array[low];
              array[low]=t;
              mid++;low++;
          }
     /* if we get array[mid] is greater than b then swap array[mid] with array[h] and decrease h.
          else if(array[mid]>b)
          {
              int t=array[mid];
              array[mid]=array[h];
              array[h]=t;
              h--;
          }
          else mid++;
      }
    }
}
time complexity:-O(n)

=====================================================
Three-way partitioning of an array using Two Pointer
The idea is based on Dutch National Flag based QuickSort. We traverse the given array of elements from left. We keep track of two pointers, first to store next position of smaller element (smaller than range) from beginning, and second to store next position of greater element from end. while traversing the array use these two pointers to place elements according to there range.

Follow the steps mentioned below to implement the idea:

Create two variables start and end to store the index of the vacant place to store the elements according to their range.
Traverse the array from 0 to end.
If an element is less than lowVal then swap it with the element present at index start and increase the value of start by 1.
If an element is greater than highVal then swap it with the element present at index end and decrease the value of end by 1.
Print the array.                                                                                                                                                                                                                                        
Below is the implementation of the above approach:


// Java program to implement three way partitioning
// around a given range.
import java.io.*;
 
class GFG {
 
    // Partitions arr[0..n-1] around [lowVal..highVal]
    public static void
    threeWayPartition(int[] arr, int lowVal, int highVal)
    {
 
        int n = arr.length;
 
        // Initialize ext available positions for
        // smaller (than range) and greater elements
        int start = 0, end = n - 1;
 
        // Traverse elements from left
        for (int i = 0; i <= end;) {
 
            // If current element is smaller than
            // range, put it on next available smaller
            // position.
 
            if (arr[i] < lowVal) {
 
                int temp = arr[start];
                arr[start] = arr[i];
                arr[i] = temp;
                start++;
                i++;
            }
 
            // If current element is greater than
            // range, put it on next available greater
            // position.
            else if (arr[i] > highVal) {
 
                int temp = arr[end];
                arr[end] = arr[i];
                arr[i] = temp;
                end--;
            }
 
            else
                i++;
        }
    }
 
    public static void main(String[] args)
    {
 
        int arr[] = { 1,  14, 5,  20, 4, 2, 54,
                      20, 87, 98, 3,  1, 32 };
 
        threeWayPartition(arr, 10, 20);
 
        System.out.println("Modified array ");
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}
 
// This code is contributed by Dheerendra Singh
Output
Modified array 
1 5 4 2 1 3 14 20 20 98 87 32 54 
Time Complexity: O(N) 
Auxiliary Space: O(1)

